;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("VERSION" variable (:default-value ("1")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("3")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("0")) nil [28 41])
            ("EXTRAVERSION" variable (:default-value ("Kitten")) nil [41 63])
            ("NAME" variable (:default-value ("Kitten")) nil [63 75])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [358 392])
            ("PHONY" variable (:default-value ("_all")) nil [2894 2908])
            ("_all" function nil nil [2908 2914])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [3066 3099])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell cd $(KBUILD_OUTPUT) && /bin/pwd)")) nil [3099 3157])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)")) nil [3249 3274])
            ("_all" function nil nil [3275 3458])
            ("$(filter-out _all,$(MAKECMDGOALS))" function nil nil [3275 3458])
            ("skip-makefile" variable (:default-value ("1")) nil [3506 3525])
            ("PHONY" variable (:default-value ("all")) nil [3799 3812])
            ("_all" function (:arguments ("all")) nil [3837 3847])
            ("_all" function (:arguments ("modules")) nil [3852 3866])
            ("srctree" variable (:default-value ("$(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))")) nil [3873 3929])
            ("TOPDIR" variable (:default-value ("$(srctree)")) nil [3929 3951])
            ("objtree" variable (:default-value ("$(CURDIR)")) nil [4001 4023])
            ("src" variable (:default-value ("$(srctree)")) nil [4023 4042])
            ("obj" variable (:default-value ("$(objtree)")) nil [4042 4061])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [4062 4123])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ )")) nil [4499 4704])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [5687 5710])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [5710 5730])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [5842 5984])
            ("HOSTCC" variable (:default-value ("gcc")) nil [5985 6000])
            ("HOSTCXX" variable (:default-value ("g++")) nil [6000 6016])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-Wno-unused" "-Wno-format-security" "-U_FORTIFY_SOURCE" "-Wconversion")) nil [6016 6149])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [6149 6168])
            ("KBUILD_MODULES" variable nil nil [6255 6273])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [6273 6293])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(srctree)")) nil [8256 8294])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [8330 8373])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [8507 8532])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [8532 8557])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [8557 8583])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [8583 8599])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [8599 8624])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [8624 8649])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [8649 8680])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [8680 8715])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [8715 8750])
            ("AWK" variable (:default-value ("awkGENKSYMS" "=" "scripts/genksyms/genksyms")) nil [8750 8797])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [8797 8820])
            ("KALLSYMS" variable (:default-value ("scripts/kallsyms")) nil [8820 8848])
            ("PERL" variable (:default-value ("perl")) nil [8848 8861])
            ("CHECK" variable (:default-value ("sparse")) nil [8861 8877])
            ("CHECKFLAGS" variable (:default-value ("-D__lwk__" "-Dlwk" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "$(CF)")) nil [8878 8957])
            ("MODFLAGS" variable (:default-value ("-DMODULE")) nil [8957 8977])
            ("CFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [8977 9007])
            ("AFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [9007 9037])
            ("LDFLAGS_MODULE" variable (:default-value ("-r")) nil [9037 9058])
            ("CFLAGS_KERNEL" variable nil nil [9058 9074])
            ("AFLAGS_KERNEL" variable nil nil [9074 9090])
            ("LINUX_INCLUDE" variable (:default-value ("-Iofed/include")) nil [9090 9123])
            ("LWKINCLUDE" variable (:default-value ("-Iinclude" "$(LINUX_INCLUDE)" "$(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include)" "-include" "include/lwk/autoconf.h")) nil [9235 9384])
            ("CPPFLAGS" variable (:default-value ("-D__KERNEL__" "$(LWKINCLUDE)" "-D__LWK__")) nil [9385 9441])
            ("CFLAGS" variable (:default-value ("-std=gnu99" "-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-strict-overflow" "-fno-common" "-fno-pie")) nil [9442 9591])
            ("CFLAGS" variable (:default-value ("-fno-stack-protector")) nil [9641 9673])
            ("CFLAGS" variable (:default-value ("-fgnu89-inline")) nil [9726 9752])
            ("AFLAGS" variable (:default-value ("-D__ASSEMBLY__")) nil [9759 9785])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat .kernelrelease 2> /dev/null)")) nil [9842 9899])
            ("KERNELVERSION" variable (:default-value ("$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)")) nil [9899 9967])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10525 10612])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10525 10612])
            ("RCS_FIND_IGNORE" variable (:default-value ("\\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [10655 10787])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10787 10919])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10787 10919])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [11090 11113])
            ("scripts_basic" function nil nil [11113 11164])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [11231 11264])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [11265 11289])
            ("outputmakefile" function nil nil [11454 11470])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "TAGS" "tags" "help" "%docs" "check%")) nil [12038 12129])
            ("config-targets" variable (:default-value ("0")) nil [12130 12150])
            ("mixed-targets" variable (:default-value ("0")) nil [12150 12170])
            ("dot-config" variable (:default-value ("1")) nil [12170 12190])
            ("%" function (:arguments ("FORCE")) nil [12818 12870])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [13267 13311])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13336 13500])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13501 13666])
            ("PHONY" variable (:default-value ("scripts")) nil [14042 14059])
            ("scripts" function (:arguments ("scripts_basic" "include/config/MARKER")) nil [14059 14131])
            ("scripts_basic" function (:arguments ("include/lwk/autoconf.h")) nil [14132 14170])
            ("drivers-y" variable (:default-value ("drivers/")) nil [14232 14254])
            ("net-y" variable (:default-value ("net/")) nil [14254 14269])
            ("block-y" variable (:default-value ("block/")) nil [14269 14295])
            ("libs-y" variable (:default-value ("lib/")) nil [14295 14311])
            ("ofed-y" variable (:default-value ("ofed/")) nil [14331 14356])
            (".config" include nil nil [14576 14592])
            (".kconfig.d" function (:arguments (";")) nil [14759 14781])
            (".config" function (:arguments (";")) nil [14759 14781])
            ("include/lwk/autoconf.h" function (:arguments (".kconfig.d" ".config")) nil [15033 15154])
            ("include/lwk/autoconf.h" function (:arguments (";")) nil [15211 15237])
            ("DEFAULT_EXTRA_TARGETS" variable (:default-value ("vmlwk.bin" "vmlwk.asm" "init_task")) nil [15244 15296])
            ("all" function (:arguments ("vmlwk" "$(DEFAULT_EXTRA_TARGETS)")) nil [15520 15556])
            ("CFLAGS" variable (:default-value ("-Os")) nil [15591 15606])
            ("CFLAGS" variable (:default-value ("-O2")) nil [15611 15626])
            ("CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "$(call cc-option,-fno-optimize-sibling-calls,)")) nil [15660 15742])
            ("CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [15747 15779])
            ("CFLAGS" variable (:default-value ("-fasynchronous-unwind-tables")) nil [15811 15851])
            ("CFLAGS" variable (:default-value ("-g")) nil [15882 15896])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [15904 15948])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [16026 16103])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [16103 16139])
            ("CFLAGS" variable (:default-value ("$(call cc-option,-Wno-pointer-sign,)")) nil [16189 16236])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [16877 16935])
            ("core-y" variable (:default-value ("kernel/" "modules/")) nil [17030 17058])
            ("vmlwk-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(ofed-y) $(ofed-m)\\
		     $(net-y) $(net-m) $(block-y) $(block-m) $(libs-y) $(libs-m)))")) nil [17059 17276])
            ("vmlwk-alldirs" variable (:default-value ("$(sort $(vmlwk-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-n) $(init-) \\
		     $(core-n) $(core-) $(drivers-n) $(drivers-) \\
		     $(ofed-n) $(ofed-) \\
		     $(net-n)  $(net-) $(block-n) $(block-)  $(libs-n)    $(libs-))))")) nil [17277 17527])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [17528 17579])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [17579 17630])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [17630 17686])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [17686 17735])
            ("block-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(block-y))")) nil [17735 17795])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [17795 17842])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [17842 17894])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [17894 17927])
            ("ofed-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(ofed-y))")) nil [17981 18040])
            ("v3vee-objs" variable nil nil [19153 19167])
            ("v3vee-objs" variable (:default-value ("$(CONFIG_PALACIOS_PATH)/libv3vee.a")) nil [19190 19239])
            ("v3vee" function (:arguments ("FORCE")) nil [19246 19259])
            ("vmlwk-init" variable (:default-value ("$(head-y)" "$(init-y)")) nil [19321 19355])
            ("vmlwk-main" variable (:default-value ("$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)" "$(block-y)" "$(ofed-y)")) nil [19355 19432])
            ("vmlwk-all" variable (:default-value ("$(vmlwk-init)" "$(vmlwk-main)")) nil [19432 19474])
            ("vmlwk-lds" variable (:default-value ("arch/$(SRCARCH)/kernel/vmlwk.lds")) nil [19474 19521])
            ("quiet_cmd_vmlwk_version" variable (:default-value ("GEN" ".version")) nil [19974 20017])
            ("quiet_cmd_sysmap" variable (:default-value ("SYSMAP")) nil [20310 20337])
            ("last_kallsyms" variable (:default-value ("3")) nil [22153 22172])
            ("last_kallsyms" variable (:default-value ("2")) nil [22177 22196])
            ("kallsyms.o" variable (:default-value (".tmp_kallsyms$(last_kallsyms).o")) nil [22203 22249])
            ("cmd_ksym_ld" variable (:default-value ("$(cmd_vmlwk__)")) nil [22811 22840])
            ("quiet_cmd_kallsyms" variable (:default-value ("KSYM" "$@")) nil [23019 23051])
            (".tmp_kallsyms2.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23170 23276])
            (".tmp_kallsyms1.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23170 23276])
            (".tmp_kallsyms%.S" function (:arguments (".tmp_vmlwk%" "$(KALLSYMS)")) nil [23277 23341])
            (".tmp_vmlwk1" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" "FORCE")) nil [23414 23492])
            (".tmp_vmlwk2" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms1.o" "FORCE")) nil [23493 23583])
            (".tmp_vmlwk3" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms2.o" "FORCE")) nil [23584 23674])
            ("$(KALLSYMS)" function (:arguments ("scripts" ";")) nil [23733 23756])
            ("debug_kallsyms" function (:arguments (".tmp_map$(last_kallsyms)")) nil [23818 23859])
            (".tmp_map%" function (:arguments (".tmp_vmlwk%" "FORCE")) nil [23860 23974])
            (".tmp_map3" function (:arguments (".tmp_map2")) nil [23975 23996])
            (".tmp_map2" function (:arguments (".tmp_map1")) nil [23997 24018])
            ("vmlwk" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-init)" "$(vmlwk-main)" "v3vee" "$(kallsyms.o)" "FORCE")) nil [24100 24231])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24401 24523])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24528 24573])
            ("vmlwk.asm" function (:arguments ("vmlwk")) nil [24580 24631])
            ("$(vmlwk-lds)" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24723 24789])
            ("$(sort $(vmlwk-init) $(vmlwk-main))" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24723 24789])
            ("PHONY" variable (:default-value ("$(vmlwk-dirs)")) nil [25072 25095])
            ("$(vmlwk-dirs)" function (:arguments ("prepare" "scripts")) nil [25095 25151])
            ("nullstring" variable nil nil [25519 25533])
            ("space" variable (:default-value ("$(nullstring)")) nil [25533 25575])
            ("___localver" variable (:default-value ("$(objtree)/localversion*" "$(srctree)/localversion*")) nil [25576 25640])
            ("__localver" variable (:default-value ("$(sort $(wildcard $(___localver)))")) nil [25640 25689])
            ("_localver" variable (:default-value ("$(foreach f, $(__localver), $(if $(findstring ~, $(f)),,$(f)))")) nil [25726 25801])
            ("localver" variable (:default-value ("$(subst $(space),, \\
	   $(shell cat /dev/null $(_localver)) \\
	   $(patsubst \"%\",%,$(CONFIG_LOCALVERSION)))")) nil [25802 25922])
            ("localver-full" variable (:default-value ("$(localver)$(localver-auto)")) nil [26457 26501])
            ("kernelrelease" variable (:default-value ("$(KERNELVERSION)$(localver-full)")) nil [26554 26603])
            (".kernelrelease" function (:arguments ("FORCE")) nil [26603 26671])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [27018 27083])
            ("PHONY" variable (:default-value ("prepare-all")) nil [27146 27167])
            ("prepare3" function (:arguments (".kernelrelease")) nil [27404 27429])
            ("prepare2" function (:arguments ("prepare3" "outputmakefile")) nil [28003 28037])
            ("prepare1" function (:arguments ("prepare2" "include/lwk/version.h" "include/arch" "linux/include/asm" "include/config/MARKER")) nil [28038 28153])
            ("archprepare" function (:arguments ("prepare1" "scripts_basic")) nil [28240 28276])
            ("prepare0" function (:arguments ("archprepare" "FORCE")) nil [28277 28329])
            ("prepare-all" function (:arguments ("prepare0")) nil [28352 28382])
            ("prepare" function (:arguments ("prepare0")) nil [28352 28382])
            ("include/arch" function (:arguments ("FORCE")) nil [28644 29523])
            ("linux/include/asm" function (:arguments ("FORCE")) nil [29524 30432])
            ("include/config/MARKER" function (:arguments ("scripts/basic/split-include" "include/lwk/autoconf.h")) nil [30480 30695])
            ("uts_len" variable (:default-value ("64")) nil [30933 30947])
            ("include/lwk/version.h" function (:arguments ("$(srctree)/Makefile" ".config" ".kernelrelease" "FORCE")) nil [31368 31467])
            ("PHONY" variable (:default-value ("depend" "dep")) nil [31547 31567])
            ("dep" function nil nil [31567 31629])
            ("depend" function nil nil [31567 31629])
            ("INSTALL_HDR_PATH" variable (:default-value ("$(MODLIB)/abi")) nil [31725 31756])
            ("PHONY" variable (:default-value ("headers_install")) nil [31781 31806])
            ("headers_install" function (:arguments ("include/lwk/version.h")) nil [31806 31984])
            ("PHONY" variable (:default-value ("headers_check")) nil [31985 32008])
            ("headers_check" function (:arguments ("headers_install")) nil [32008 32122])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [32467 32495])
            ("CLEAN_FILES" variable (:default-value ("vmlwk" "System.map" "vmlwk.bin" "vmlwk.asm" ".tmp_kallsyms*" ".tmp_version" ".tmp_vmlwk*" ".tmp_System.map")) nil [32495 32621])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "include2")) nil [32673 32715])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" "include/arch" "linux/include/asm" ".version" ".old_version" "include/lwk/autoconf.h" "include/lwk/version.h" ".kernelrelease" "Module.symvers" "tags" "TAGS" "cscope*")) nil [32715 32925])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [32994 33027])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [33027 33061])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(srctree) $(vmlwk-alldirs))")) nil [33061 33129])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean")) nil [33130 33169])
            ("$(clean-dirs)" function nil nil [33169 33232])
            ("clean" function (:arguments ("archclean" "$(clean-dirs)")) nil [33233 33555])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [33617 33668])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [33668 33720])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_, scripts)")) nil [33797 33852])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [33853 33901])
            ("$(mrproper-dirs)" function nil nil [33901 33970])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [33971 34058])
            ("PHONY" variable (:default-value ("distclean")) nil [34073 34092])
            ("distclean" function (:arguments ("mrproper")) nil [34093 34381])
            ("package-dir" variable (:default-value ("$(srctree)/scripts/package")) nil [34551 34593])
            ("%pkg" function (:arguments ("FORCE")) nil [34594 34646])
            ("rpm" function (:arguments ("FORCE")) nil [34646 34697])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [34828 34897])
            ("boards" variable (:default-value ("$(notdir $(boards))")) nil [34897 34927])
            ("help" function nil nil [34928 36640])
            ("%docs" function (:arguments ("scripts_basic" "FORCE")) nil [37204 37278])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [38061 38081])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [38081 38102])
            ("crmodverdir" function nil nil [38102 38168])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [38169 38223])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [38223 38255])
            ("$(module-dirs)" function (:arguments ("crmodverdir")) nil [38255 38332])
            ("modules" function (:arguments ("$(module-dirs)")) nil [38333 38396])
            ("PHONY" variable (:default-value ("modules_install")) nil [38454 38479])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [38479 38522])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [38523 38588])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [38588 38608])
            ("_emodinst_" function nil nil [38608 38715])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [38781 38825])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [39140 39164])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [39164 39211])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [39212 39264])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [39265 39294])
            ("$(clean-dirs)" function nil nil [39294 39357])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [39358 39389])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [39389 39624])
            ("help" function nil nil [39625 39947])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [39961 39986])
            ("prepare" function (:arguments (";")) nil [39986 39997])
            ("scripts" function (:arguments (";")) nil [39997 40008])
            ("__srctree" variable nil nil [40391 40403])
            ("__srctree" variable (:default-value ("$(srctree)/")) nil [40408 40432])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)" "$(SUBARCH)")) nil [40484 40523])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40528 40556])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ALLSOURCE_ARCHS)")) nil [40660 40699])
            ("ALLSOURCE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40706 40733])
            ("quiet_cmd_cscope-file" variable (:default-value ("FILELST" "cscope.files")) nil [41881 41926])
            ("quiet_cmd_cscope" variable (:default-value ("MAKE" "cscope.out")) nil [42003 42041])
            ("cscope" function (:arguments ("FORCE")) nil [42071 42130])
            ("quiet_cmd_TAGS" variable (:default-value ("MAKE" "$@")) nil [42131 42158])
            ("TAGS" function (:arguments ("FORCE")) nil [42532 42562])
            ("quiet_cmd_tags" variable (:default-value ("MAKE" "$@")) nil [42564 42591])
            ("tags" function (:arguments ("FORCE")) nil [42965 42995])
            ("includecheck" function nil nil [43126 43257])
            ("versioncheck" function nil nil [43258 43388])
            ("namespacecheck" function nil nil [43389 43446])
            ("PHONY" variable (:default-value ("checkstack")) nil [43515 43535])
            ("checkstack" function nil nil [43535 43645])
            ("kernelrelease" function nil nil [43646 43793])
            ("kernelversion" function nil nil [43793 43832])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44488 44580])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44580 44672])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44672 44764])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44764 44858])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44858 44950])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44950 45042])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45053 45157])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45157 45262])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [45262 45439])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [45567 45646])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [45684 45766])
            ("a_flags" variable (:default-value ("-Wp,-MD,$(depfile)" "$(AFLAGS)" "$(AFLAGS_KERNEL)" "$(NOSTDINC_FLAGS)" "$(CPPFLAGS)" "$(modkern_aflags)" "$(EXTRA_AFLAGS)" "$(AFLAGS_$(*F).o)")) nil [45806 45954])
            ("quiet_cmd_as_o_S" variable (:default-value ("AS" "$@")) nil [45955 45985])
            ("cmd_as_o_S" variable (:default-value ("$(CC)" "$(a_flags)" "-c" "-o" "$@" "$<")) nil [45985 46033])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [46066 46108])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [46108 46195])
            ("clean" variable (:default-value ("-f" "$(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean" "obj")) nil [46413 46483])
            ("init_task" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46574 46616])
            ("user" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46574 46616])
            ("user" function (:arguments ("FORCE")) nil [46670 46808])
            ("init_task" function (:arguments ("user" "FORCE")) nil [46865 46937])
            ("PHONY" variable (:default-value ("FORCE")) nil [46938 46953])
            ("FORCE" function nil nil [46953 46960]))          
      :file "Makefile"
      :pointmax 47121
      :fsize 47121
      :lastmodtime '(24861 50387)
      :unmatched-syntax '((semantic-list 47113 . 47120) (punctuation 47112 . 47113) (punctuation 47110 . 47111) (symbol 47104 . 47110) (bol 47104 . 47104) (ENDIF 46484 . 46489) (bol 46484 . 46484) (semantic-list 46296 . 46307) (punctuation 46295 . 46296) (INCLUDE 46287 . 46294) (bol 46285 . 46285) (punctuation 46234 . 46235) (punctuation 46232 . 46233) (semantic-list 46221 . 46232) (punctuation 46220 . 46221) (bol 46218 . 46218) (semantic-list 45793 . 45803) (punctuation 45792 . 45793) (symbol 45789 . 45791) (symbol 45786 . 45788) (punctuation 45784 . 45785) (symbol 45772 . 45783) (bol 45766 . 45766) (semantic-list 45673 . 45682) (punctuation 45672 . 45673) (symbol 45668 . 45671) (symbol 45665 . 45667) (punctuation 45663 . 45664) (symbol 45652 . 45662) (bol 45646 . 45646) (semantic-list 44439 . 44480) (punctuation 44438 . 44439) (punctuation 44436 . 44437) (symbol 44425 . 44435) (bol 44417 . 44417) (semantic-list 44385 . 44416) (punctuation 44384 . 44385) (semantic-list 44369 . 44384) (punctuation 44368 . 44369) (punctuation 44366 . 44367) (symbol 44355 . 44364) (bol 44347 . 44347) (semantic-list 44305 . 44346) (punctuation 44304 . 44305) (punctuation 44303 . 44304) (symbol 44294 . 44303) (bol 44286 . 44286) (semantic-list 44272 . 44280) (punctuation 44271 . 44272) (punctuation 44269 . 44270) (symbol 44258 . 44268) (bol 44250 . 44250) (semantic-list 44224 . 44249) (punctuation 44223 . 44224) (punctuation 44221 . 44222) (symbol 44210 . 44219) (bol 44202 . 44202) (ENDIF 43481 . 43486) (bol 43481 . 43481) (ENDIF 43447 . 43452) (bol 43447 . 43447) (symbol 42958 . 42963) (bol 42958 . 42958) (shell-command 42608 . 42957) (bol 42607 . 42607) (symbol 42598 . 42606) (symbol 42591 . 42597) (bol 42591 . 42591) (symbol 42525 . 42530) (bol 42525 . 42525) (shell-command 42175 . 42524) (bol 42174 . 42174) (symbol 42165 . 42173) (symbol 42158 . 42164) (bol 42158 . 42158) (symbol 42067 . 42069) (symbol 42060 . 42066) (punctuation 42058 . 42059) (symbol 42047 . 42057) (bol 42041 . 42041) (symbol 41989 . 42001) (symbol 41987 . 41988) (semantic-list 41950 . 41986) (punctuation 41948 . 41949) (symbol 41932 . 41947) (bol 41926 . 41926) (symbol 41874 . 41879) (bol 41874 . 41874) (shell-command 40754 . 41873) (bol 40753 . 40753) (symbol 40741 . 40752) (symbol 40734 . 40740) (bol 40734 . 40734) (ENDIF 40008 . 40013) (bol 40008 . 40008) (symbol 39136 . 39138) (punctuation 39091 . 39092) (semantic-list 39076 . 39091) (punctuation 39075 . 39076) (semantic-list 38976 . 39051) (punctuation 38975 . 38976) (symbol 38928 . 38938) (symbol 38925 . 38927) (symbol 38921 . 38924) (semantic-list 38912 . 38920) (punctuation 38911 . 38912) (symbol 38882 . 38886) (punctuation 38880 . 38881) (semantic-list 38847 . 38880) (IF 38844 . 38846) (punctuation 38842 . 38843) (symbol 38831 . 38841) (bol 38825 . 38825) (ELSE 37279 . 37283) (bol 37279 . 37279) (shell-command 37052 . 37099) (bol 37051 . 37051) (shell-command 36975 . 37050) (bol 36974 . 36974) (shell-command 36964 . 36973) (bol 36963 . 36963) (shell-command 36881 . 36962) (bol 36880 . 36880) (shell-command 36807 . 36879) (bol 36806 . 36806) (shell-command 36722 . 36805) (bol 36721 . 36721) (shell-command 36642 . 36720) (bol 36641 . 36641) (symbol 31763 . 31779) (symbol 31756 . 31762) (bol 31756 . 31756) (symbol 31361 . 31366) (bol 31361 . 31361) (shell-command 30974 . 31360) (bol 30973 . 30973) (symbol 30955 . 30972) (symbol 30948 . 30954) (bol 30948 . 30948) (semantic-list 28532 . 28541) (punctuation 28531 . 28532) (symbol 28529 . 28531) (symbol 28526 . 28528) (symbol 28523 . 28525) (punctuation 28521 . 28522) (punctuation 28520 . 28521) (symbol 28501 . 28519) (symbol 28494 . 28500) (bol 28494 . 28494) (shell-command 28208 . 28232) (bol 28207 . 28207) (shell-command 28181 . 28206) (bol 28180 . 28180) (shell-command 27858 . 27928) (bol 27857 . 27857) (shell-command 27791 . 27856) (bol 27790 . 27790) (shell-command 27729 . 27789) (bol 27728 . 27728) (shell-command 27674 . 27727) (bol 27673 . 27673) (shell-command 27502 . 27672) (bol 27501 . 27501) (shell-command 27453 . 27500) (bol 27452 . 27452) (shell-command 26400 . 26449) (bol 26399 . 26399) (shell-command 26290 . 26398) (bol 26289 . 26289) (shell-command 25923 . 25930) (bol 25922 . 25922) (ENDIF 24019 . 24024) (bol 24019 . 24019) (punctuation 23167 . 23168) (punctuation 23166 . 23167) (symbol 23164 . 23165) (semantic-list 23122 . 23163) (punctuation 23121 . 23122) (semantic-list 23087 . 23097) (punctuation 23086 . 23087) (symbol 23084 . 23085) (symbol 23082 . 23083) (punctuation 23081 . 23082) (symbol 23078 . 23080) (semantic-list 23073 . 23077) (punctuation 23072 . 23073) (punctuation 23070 . 23071) (symbol 23057 . 23069) (bol 23051 . 23051) (symbol 22969 . 22974) (bol 22969 . 22969) (shell-command 22914 . 22968) (bol 22913 . 22913) (shell-command 22893 . 22912) (bol 22892 . 22892) (shell-command 22865 . 22891) (bol 22864 . 22864) (shell-command 22861 . 22863) (bol 22860 . 22860) (symbol 22847 . 22859) (symbol 22840 . 22846) (bol 22840 . 22840) (symbol 22640 . 22645) (bol 22640 . 22640) (shell-command 22448 . 22639) (bol 22447 . 22447) (shell-command 22274 . 22446) (bol 22273 . 22273) (symbol 22257 . 22272) (symbol 22250 . 22256) (bol 22250 . 22250) (symbol 21150 . 21155) (bol 21150 . 21150) (shell-command 21131 . 21149) (bol 21130 . 21130) (shell-command 20834 . 21129) (bol 20833 . 20833) (shell-command 20777 . 20831) (bol 20776 . 20776) (shell-command 20756 . 20775) (bol 20755 . 20755) (shell-command 20701 . 20753) (bol 20700 . 20700) (shell-command 20698 . 20699) (bol 20697 . 20697) (symbol 20684 . 20696) (symbol 20677 . 20683) (bol 20677 . 20677) (symbol 20382 . 20399) (semantic-list 20373 . 20382) (punctuation 20372 . 20373) (semantic-list 20357 . 20371) (punctuation 20356 . 20357) (punctuation 20354 . 20355) (symbol 20343 . 20353) (bol 20337 . 20337) (symbol 20280 . 20286) (punctuation 20279 . 20280) (semantic-list 20272 . 20279) (punctuation 20271 . 20272) (semantic-list 20264 . 20270) (punctuation 20263 . 20264) (punctuation 20253 . 20254) (symbol 20251 . 20253) (punctuation 20246 . 20247) (symbol 20237 . 20246) (symbol 20235 . 20236) (punctuation 20233 . 20234) (semantic-list 20214 . 20232) (punctuation 20213 . 20214) (punctuation 20212 . 20213) (symbol 20211 . 20212) (symbol 20206 . 20210) (punctuation 20197 . 20198) (symbol 20185 . 20197) (symbol 20176 . 20184) (symbol 20173 . 20175) (ELSE 20158 . 20162) (punctuation 20150 . 20151) (symbol 20141 . 20150) (symbol 20139 . 20140) (symbol 20134 . 20138) (punctuation 20124 . 20125) (symbol 20116 . 20124) (symbol 20113 . 20115) (symbol 20110 . 20112) (symbol 20098 . 20102) (punctuation 20096 . 20097) (semantic-list 20079 . 20096) (IF 20076 . 20078) (punctuation 20049 . 20050) (symbol 20047 . 20049) (symbol 20043 . 20046) (punctuation 20041 . 20042) (symbol 20023 . 20040) (bol 20017 . 20017) (semantic-list 19874 . 19943) (punctuation 19873 . 19874) (symbol 19836 . 19847) (semantic-list 19823 . 19835) (punctuation 19822 . 19823) (semantic-list 19809 . 19821) (punctuation 19808 . 19809) (symbol 19794 . 19807) (semantic-list 19746 . 19758) (punctuation 19745 . 19746) (semantic-list 19733 . 19744) (punctuation 19732 . 19733) (symbol 19729 . 19731) (punctuation 19717 . 19718) (punctuation 19716 . 19717) (symbol 19713 . 19715) (semantic-list 19697 . 19712) (punctuation 19696 . 19697) (semantic-list 19686 . 19695) (punctuation 19685 . 19686) (semantic-list 19680 . 19684) (punctuation 19679 . 19680) (punctuation 19677 . 19678) (punctuation 19676 . 19677) (symbol 19664 . 19675) (bol 19658 . 19658) (punctuation 19656 . 19657) (punctuation 19655 . 19656) (symbol 19647 . 19649) (punctuation 19645 . 19646) (punctuation 19644 . 19645) (symbol 19626 . 19643) (bol 19626 . 19626) (shell-command 19282 . 19313) (bol 19281 . 19281) (symbol 16942 . 16948) (symbol 16935 . 16941) (bol 16935 . 16935) (symbol 16667 . 16672) (punctuation 16665 . 16666) (punctuation 16664 . 16665) (symbol 16651 . 16663) (symbol 16644 . 16650) (bol 16644 . 16644) (symbol 16498 . 16503) (punctuation 16496 . 16497) (punctuation 16495 . 16496) (symbol 16482 . 16494) (symbol 16475 . 16481) (bol 16475 . 16475) (symbol 14564 . 14574) (symbol 14555 . 14563) (bol 14555 . 14555) (ENDIF 14373 . 14378) (bol 14373 . 14373) (symbol 13318 . 13334) (symbol 13311 . 13317) (bol 13311 . 13311) (ENDIF 12611 . 12616) (bol 12603 . 12603) (ENDIF 12597 . 12602) (bol 12581 . 12581) (symbol 12579 . 12580) (punctuation 12577 . 12578) (punctuation 12576 . 12577) (symbol 12562 . 12575) (bol 12538 . 12538) (semantic-list 12490 . 12537) (IFNEQ 12484 . 12489) (bol 12468 . 12468) (symbol 12466 . 12467) (punctuation 12464 . 12465) (punctuation 12463 . 12464) (symbol 12448 . 12462) (bol 12432 . 12432) (semantic-list 12388 . 12431) (IFNEQ 12382 . 12387) (bol 12374 . 12374) (shell-command 12336 . 12341) (bol 12335 . 12335) (shell-command 12318 . 12334) (bol 12317 . 12317) (shell-command 12253 . 12316) (bol 12252 . 12252) (shell-command 11494 . 11597) (bol 11493 . 11493) (symbol 10362 . 10375) (symbol 10348 . 10361) (symbol 10341 . 10347) (symbol 10334 . 10340) (bol 10334 . 10334) (symbol 10319 . 10332) (symbol 10305 . 10318) (symbol 10298 . 10304) (symbol 10291 . 10297) (bol 10291 . 10291) (symbol 10283 . 10290) (symbol 10270 . 10282) (symbol 10259 . 10269) (symbol 10244 . 10258) (symbol 10235 . 10243) (symbol 10228 . 10234) (bol 10228 . 10228) (symbol 10216 . 10226) (symbol 10210 . 10215) (symbol 10195 . 10209) (symbol 10182 . 10194) (symbol 10174 . 10181) (symbol 10159 . 10170) (symbol 10154 . 10158) (symbol 10145 . 10153) (symbol 10141 . 10144) (symbol 10136 . 10140) (symbol 10128 . 10135) (symbol 10120 . 10127) (symbol 10114 . 10119) (symbol 10111 . 10113) (symbol 10108 . 10110) (symbol 10104 . 10107) (symbol 10098 . 10100) (symbol 10095 . 10097) (symbol 10092 . 10094) (symbol 10078 . 10091) (symbol 10067 . 10077) (symbol 10060 . 10066) (symbol 10047 . 10059) (symbol 10039 . 10046) (symbol 10034 . 10038) (symbol 10017 . 10030) (symbol 10003 . 10016) (symbol 9994 . 10002) (symbol 9983 . 9993) (symbol 9975 . 9982) (symbol 9968 . 9974) (bol 9968 . 9968) (symbol 8178 . 8192) (symbol 8176 . 8177) (symbol 8170 . 8175) (symbol 8163 . 8169) (bol 8163 . 8163) (symbol 8148 . 8155) (punctuation 8147 . 8148) (symbol 8142 . 8147) (bol 8140 . 8140) (punctuation 8013 . 8014) (punctuation 8011 . 8012) (symbol 8009 . 8010) (bol 8007 . 8007) (symbol 8000 . 8006) (punctuation 7999 . 8000) (symbol 7994 . 7999) (bol 7992 . 7992) (punctuation 7985 . 7986) (symbol 7983 . 7984) (bol 7981 . 7981) (punctuation 7979 . 7980) (symbol 7973 . 7978) (bol 7971 . 7971) (symbol 7000 . 7013) (symbol 6989 . 6999) (symbol 6973 . 6988) (symbol 6966 . 6972) (bol 6966 . 6966) (symbol 6951 . 6965) (symbol 6936 . 6950) (symbol 6929 . 6935) (bol 6929 . 6929) (symbol 6920 . 6921) (punctuation 6918 . 6919) (punctuation 6917 . 6918) (symbol 6902 . 6916) (bol 6900 . 6900) (symbol 6867 . 6868) (punctuation 6865 . 6866) (punctuation 6864 . 6865) (symbol 6849 . 6863) (bol 6847 . 6847) (semantic-list 6606 . 6634) (punctuation 6605 . 6606) (punctuation 6603 . 6604) (punctuation 6602 . 6603) (symbol 6587 . 6601) (bol 6585 . 6585) (symbol 5805 . 5811) (punctuation 5803 . 5804) (punctuation 5802 . 5803) (symbol 5794 . 5801) (bol 5786 . 5786) (punctuation 5645 . 5646) (punctuation 5644 . 5645) (symbol 5630 . 5643) (bol 5630 . 5630) (semantic-list 5620 . 5629) (punctuation 5619 . 5620) (punctuation 5617 . 5618) (punctuation 5616 . 5617) (symbol 5610 . 5614) (bol 5610 . 5610) (symbol 4153 . 4159) (symbol 4147 . 4152) (symbol 4139 . 4146) (symbol 4131 . 4138) (symbol 4124 . 4130) (bol 4124 . 4124) (ENDIF 3559 . 3564) (bol 3559 . 3559) (ENDIF 3525 . 3530) (bol 3525 . 3525) (semantic-list 3158 . 3247) (punctuation 3157 . 3158) (bol 3157 . 3157) (ENDIF 2814 . 2819) (bol 2812 . 2812) (semantic-list 2808 . 2811) (punctuation 2807 . 2808) (punctuation 2805 . 2806) (punctuation 2804 . 2805) (symbol 2790 . 2803) (bol 2786 . 2786) (semantic-list 2754 . 2785) (IFEQ 2749 . 2753) (bol 2747 . 2747) (ENDIF 1908 . 1913) (bol 1906 . 1906) (semantic-list 1902 . 1905) (punctuation 1901 . 1902) (punctuation 1899 . 1900) (punctuation 1898 . 1899) (symbol 1884 . 1897) (bol 1880 . 1880) (semantic-list 1848 . 1879) (IFEQ 1843 . 1847) (bol 1841 . 1841) (semantic-list 1817 . 1826) (punctuation 1816 . 1817) (punctuation 1814 . 1815) (punctuation 1813 . 1814) (symbol 1799 . 1812) (bol 1797 . 1797) (symbol 1589 . 1590) (punctuation 1587 . 1588) (symbol 1571 . 1586) (bol 1569 . 1569) (ENDIF 1534 . 1539) (bol 1532 . 1532) (semantic-list 1528 . 1531) (punctuation 1527 . 1528) (punctuation 1525 . 1526) (symbol 1509 . 1524) (bol 1505 . 1505) (semantic-list 1473 . 1504) (IFEQ 1468 . 1472) (bol 1466 . 1466) (symbol 1357 . 1358) (punctuation 1355 . 1356) (symbol 1340 . 1354) (bol 1338 . 1338) (ENDIF 1304 . 1309) (bol 1302 . 1302) (semantic-list 1298 . 1301) (punctuation 1297 . 1298) (punctuation 1295 . 1296) (symbol 1280 . 1294) (bol 1276 . 1276) (semantic-list 1244 . 1275) (IFEQ 1239 . 1243) (bol 1237 . 1237) (symbol 8757 . 8768) (punctuation 8755 . 8756) (symbol 8750 . 8753) (bol 8750 . 8750)))
    (semanticdb-table "semanticdb-table"
      :file ".config"
      :fsize 1487
      :lastmodtime '(24861 54598)))
  :file "!ssh:osbox:!mnt!vm-shared!kitten-arm64!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
