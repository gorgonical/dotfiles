;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("_ASM_ARCH_SPL_H_" variable (:constant-flag t) nil [209 225])
            ("BOOT0_MAGIC" variable (:constant-flag t) nil [235 246])
            ("SPL_SIGNATURE" variable (:constant-flag t) nil [267 280])
            ("SPL_MAJOR_BITS" variable (:constant-flag t) nil [327 341])
            ("SPL_MINOR_BITS" variable (:constant-flag t) nil [353 367])
            ("SPL_VERSION" variable (:constant-flag t) nil [379 390])
            ("SPL_HEADER_VERSION" variable (:constant-flag t) nil [523 541])
            ("SPL_ENV_HEADER_VERSION" variable (:constant-flag t) nil [569 591])
            ("SPL_DT_HEADER_VERSION" variable (:constant-flag t) nil [618 639])
            ("SPL_DRAM_HEADER_VERSION" variable (:constant-flag t) nil [666 689])
            ("SPL_ADDR" variable (:constant-flag t) nil [717 725])
            ("SUNXI_BOOTED_FROM_MMC0" variable (:constant-flag t) nil [827 849])
            ("SUNXI_BOOTED_FROM_NAND" variable (:constant-flag t) nil [860 882])
            ("SUNXI_BOOTED_FROM_MMC2" variable (:constant-flag t) nil [893 915])
            ("SUNXI_BOOTED_FROM_SPI" variable (:constant-flag t) nil [926 947])
            ("SUNXI_BOOTED_FROM_MMC0_HIGH" variable (:constant-flag t) nil [958 985])
            ("SUNXI_BOOTED_FROM_MMC2_HIGH" variable (:constant-flag t) nil [999 1026])
            ("boot_file_head" type
               (:members 
                  ( ("b_instruction" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1106 1129])
                    ("magic" variable
                       (:dereference 1
                        :type ("uint8_t" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1173 1190])
                    ("check_sum" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1241 1260])
                    ("length" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1284 1300])
                    ("" type
                       (:members 
                          ( ("pub_head_size" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2087 2110])
                            ("spl_signature" variable
                               (:dereference 1
                                :type ("uint8_t" type (:type "class") nil nil))
                                (reparse-symbol classsubparts) [2113 2138]))                          
                        :type "union")
                        (reparse-symbol classsubparts) [2077 2142])
                    ("fel_script_address" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2144 2172])
                    ("fel_uEnv_length" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2486 2511])
                    ("dt_name_offset" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2853 2877])
                    ("dram_size" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2916 2935])
                    ("boot_media" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2975 2995])
                    ("string_pool" variable
                       (:dereference 1
                        :type ("uint32_t" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3094 3119]))                  
                :type "struct")
                nil [1081 3232])
            ("boot_file_head_not_multiple_of_32" type
               (:typedef ("char")
                :type "typedef")
                nil [3299 3390])
            ("is_boot0_magic" variable (:constant-flag t) nil [3400 3414])
            ("sunxi_get_boot_device" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3497 3502]))                  
                :type ("uint32_t" type (:type "class") nil nil))
                nil [3466 3503]))          
      :file "spl.h"
      :pointmax 3512
      :fsize 3511
      :lastmodtime '(24846 307)
      :unmatched-syntax nil
      :lexical-table 
        '(("SPL_MAJOR_BITS" . ((number "3" 343 . 344)))
          ("SUNXI_BOOTED_FROM_MMC2" . ((number "2" 916 . 917)))
          ("SUNXI_BOOTED_FROM_MMC0_HIGH" . ((number "0x10" 986 . 990)))
          ("SPL_ENV_HEADER_VERSION" . ((symbol "SPL_VERSION" 592 . 603) (semantic-list "(0, 1)" 603 . 609)))
          ("SPL_HEADER_VERSION" . ((symbol "SPL_VERSION" 542 . 553) (semantic-list "(0, 2)" 553 . 559)))
          ("_ASM_ARCH_SPL_H_")
          ("SPL_VERSION" (spp-arg-list ("maj" "min") 390 . 400) . ((semantic-list "((((maj) & ((1U << SPL_MAJOR_BITS) - 1)) << SPL_MINOR_BITS) | \\
	((min) & ((1U << SPL_MINOR_BITS) - 1)))" 409 . 513)))
          ("SPL_MINOR_BITS" . ((number "5" 369 . 370)))
          ("SUNXI_BOOTED_FROM_MMC2_HIGH" . ((number "0x12" 1027 . 1031)))
          ("SPL_DT_HEADER_VERSION" . ((symbol "SPL_VERSION" 640 . 651) (semantic-list "(0, 2)" 651 . 657)))
          ("SPL_DRAM_HEADER_VERSION" . ((symbol "SPL_VERSION" 690 . 701) (semantic-list "(0, 3)" 701 . 707)))
          ("SUNXI_BOOTED_FROM_NAND" . ((number "1" 883 . 884)))
          ("BOOT0_MAGIC" . ((string "\"eGON.BT0\"" 248 . 258)))
          ("SUNXI_BOOTED_FROM_MMC0" . ((number "0" 850 . 851)))
          ("SUNXI_BOOTED_FROM_SPI" . ((number "3" 948 . 949)))
          ("is_boot0_magic" (spp-arg-list ("addr") 3414 . 3420) . ((semantic-list "(memcmp((void *)addr, BOOT0_MAGIC, 8) == 0)" 3421 . 3464)))
          ("SPL_SIGNATURE" . ((string "\"SPL\"" 282 . 287)))
          ("SPL_ADDR" . ((symbol "CONFIG_SUNXI_SRAM_ADDRESS" 727 . 752)))
          )
))
  :file "!ssh:osbox:!home!osboxes!u-boot!arch!arm!include!asm!arch-sunxi!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
