;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [929 1264])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1267 1472])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1474 1733])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1735 1925])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1927 2372])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2374 2982])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2984 3334])
            ("mode-line-eol-desc-cache" variable nil nil [3336 3373])
            ("mode-line-eol-desc" function nil nil [3375 4254])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4282 4822])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4824 5109])
            ("put" code nil nil [5110 5162])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5164 5616])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5618 6540])
            ("put" code nil nil [6556 6606])
            ("make-variable-buffer-local" code nil nil [6607 6656])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6658 6869])
            ("put" code nil nil [6885 6932])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6934 7209])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7211 7471])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7473 7991])
            ("put" code nil nil [8007 8056])
            ("make-variable-buffer-local" code nil nil [8057 8105])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8107 8617])
            ("put" code nil nil [8633 8680])
            ("make-variable-buffer-local" code nil nil [8681 8727])
            ("mode-line-frame-control" function nil nil [8797 9034])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9144 9273])
            ("put" code nil nil [9289 9350])
            ("mode-line-process" variable nil nil [9352 9511])
            ("put" code nil nil [9527 9575])
            ("make-variable-buffer-local" code nil nil [9576 9623])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9625 10538])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10540 10649])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10651 11042])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [11044 11434])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11436 12446])
            ("put" code nil nil [12447 12493])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [size-indication-mode] (quote (menu-item "Display Size Indication" size-indication-mode :help "Toggle displaying a size indication in the mode-line" :button (:toggle . size-indication-mode)))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12495 13439])
            ("column-number-indicator-zero-based" variable (:default-value t) nil [13441 13827])
            ("mode-line-percent-position" variable (:default-value (quote (-3 "%p"))) nil [13829 14619])
            ("put" code nil nil [14620 14677])
            ("mode-line-position" variable (:default-value (\` ((:propertize mode-line-percent-position local-map (\, mode-line-column-line-number-mode-map) mouse-face mode-line-highlight help-echo "Size indication mode
mouse-1: Display Line and Column Mode Menu") (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (column-number-indicator-zero-based (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (10 (\, (propertize " (%l,%C)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu")))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (column-number-indicator-zero-based (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))) (5 (\, (propertize " C%C" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu")))))))))) nil [14679 16798])
            ("put" code nil nil [16799 16848])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [16850 17583])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [17585 18069])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [18071 18384])
            ("put" code nil nil [18400 18462])
            ("make-variable-buffer-local" code nil nil [18463 18524])
            ("mode-line-misc-info" variable (:default-value (quote ((global-mode-string ("" global-mode-string " "))))) nil [18526 18737])
            ("put" code nil nil [18738 18788])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [18790 18923])
            ("put" code nil nil [18924 18975])
            ("let" code nil nil [19040 19605])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19609 19788])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19790 19987])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [19989 20156])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20158 20355])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20357 20566])
            ("bound-and-true-p" function (:arguments ("var")) nil [20568 20698])
            ("bindings--define-key" code nil nil [20817 21038])
            ("bindings--define-key" code nil nil [21039 21287])
            ("bindings--define-key" code nil nil [21288 21553])
            ("bindings--define-key" code nil nil [21554 21783])
            ("bindings--define-key" code nil nil [21784 22023])
            ("bindings--define-key" code nil nil [22024 22198])
            ("bindings--define-key" code nil nil [22199 22404])
            ("bindings--define-key" code nil nil [22405 22709])
            ("bindings--define-key" code nil nil [22710 22950])
            ("bindings--define-key" code nil nil [22951 23151])
            ("bindings--define-key" code nil nil [23152 23342])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23344 23583])
            ("minor-mode-alist" variable nil nil [23585 23882])
            ("put" code nil nil [23898 23945])
            ("setq" code nil nil [24016 24223])
            ("setq" code nil nil [24508 25770])
            ("setq" code nil nil [25806 25948])
            ("setq" code nil nil [26062 26465])
            ("make-variable-buffer-local" code nil nil [26467 26513])
            ("mapc" code nil nil [26835 27228])
            ("base64" package nil nil [27286 27303])
            ("md5" package nil nil [27304 27318])
            ("sha1" package nil nil [27319 27334])
            ("overlay" package nil nil [27335 27383])
            ("text-properties" package nil nil [27384 27454])
            ("define-key" code nil nil [27456 27498])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27500 27879])
            ("garbage-collect" code nil nil [27997 28014])
            ("setq" code nil nil [28018 28055])
            ("make-variable-buffer-local" code nil nil [28057 28118])
            ("global-set-key" code nil nil [28136 28188])
            ("global-set-key" code nil nil [28189 28243])
            ("global-set-key" code nil nil [28439 28491])
            ("global-set-key" code nil nil [28492 28538])
            ("global-set-key" code nil nil [28539 28590])
            ("put" code nil nil [28676 28711])
            ("visual-order-cursor-movement" variable nil nil [28764 29468])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29470 30226])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30228 30983])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30985 31593])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [31595 32202])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [32204 32279])
            ("define-key" code nil nil [32280 32317])
            ("define-key" code nil nil [32319 32364])
            ("define-key" code nil nil [32365 32399])
            ("define-key" code nil nil [32413 32467])
            ("define-key" code nil nil [32468 32513])
            ("substitute-key-definition" code nil nil [32622 32690])
            ("define-key" code nil nil [32692 32731])
            ("define-key" code nil nil [32732 32773])
            ("define-key" code nil nil [32774 32813])
            ("define-key" code nil nil [32814 32859])
            ("define-key" code nil nil [32860 32904])
            ("define-key" code nil nil [32905 32955])
            ("define-key" code nil nil [32956 33001])
            ("define-key" code nil nil [33002 33051])
            ("define-key" code nil nil [33052 33092])
            ("define-key" code nil nil [33093 33130])
            ("define-key" code nil nil [33131 33175])
            ("define-key" code nil nil [33176 33224])
            ("define-key" code nil nil [33225 33266])
            ("define-key" code nil nil [33340 33384])
            ("define-key" code nil nil [33451 33504])
            ("define-key" code nil nil [33538 33591])
            ("define-key" code nil nil [33592 33624])
            ("put" code nil nil [33625 33667])
            ("define-key" code nil nil [33738 33775])
            ("define-key" code nil nil [33776 33812])
            ("define-key" code nil nil [33991 34030])
            ("define-key" code nil nil [34031 34080])
            ("define-key" code nil nil [34081 34126])
            ("define-key" code nil nil [34128 34171])
            ("define-key" code nil nil [34172 34217])
            ("define-key" code nil nil [34218 34268])
            ("define-key" code nil nil [34269 34315])
            ("define-key" code nil nil [34316 34364])
            ("define-key" code nil nil [34365 34416])
            ("let" code nil nil [34418 35321])
            ("define-key" code nil nil [35323 35373])
            ("let" code nil nil [35374 35488])
            ("define-key" code nil nil [35489 35532])
            ("let" code nil nil [35559 35687])
            ("define-key" code nil nil [35688 35738])
            ("let" code nil nil [35770 35895])
            ("define-key" code nil nil [35896 35949])
            ("define-key" code nil nil [36005 36057])
            ("define-key" code nil nil [36340 36383])
            ("define-key" code nil nil [36385 36426])
            ("define-key" code nil nil [36427 36470])
            ("define-key" code nil nil [36471 36511])
            ("define-key" code nil nil [36512 36557])
            ("define-key" code nil nil [36558 36594])
            ("define-key" code nil nil [36595 36629])
            ("define-key" code nil nil [36680 36728])
            ("define-key" code nil nil [36786 36835])
            ("put" code nil nil [36836 36887])
            ("define-key" code nil nil [36889 36943])
            ("define-key" code nil nil [36944 36990])
            ("define-key" code nil nil [36991 37038])
            ("define-key" code nil nil [37039 37086])
            ("define-key" code nil nil [37088 37129])
            ("define-key" code nil nil [37130 37175])
            ("define-key" code nil nil [37176 37222])
            ("define-key" code nil nil [37223 37277])
            ("define-key" code nil nil [37278 37326])
            ("define-key" code nil nil [37328 37366])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [37368 37442])
            ("define-key" code nil nil [37443 37476])
            ("define-key" code nil nil [37478 37517])
            ("define-key" code nil nil [37518 37557])
            ("define-key" code nil nil [37558 37597])
            ("define-key" code nil nil [37598 37638])
            ("define-key" code nil nil [37639 37679])
            ("define-key" code nil nil [37680 37724])
            ("define-key" code nil nil [37725 37769])
            ("define-key" code nil nil [37770 37814])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [37816 37896])
            ("define-key" code nil nil [37897 37932])
            ("define-key" code nil nil [37934 37971])
            ("define-key" code nil nil [37972 38020])
            ("define-key" code nil nil [38021 38069])
            ("define-key" code nil nil [38070 38118])
            ("define-key" code nil nil [38119 38182])
            ("define-key" code nil nil [38183 38240])
            ("define-key" code nil nil [38241 38291])
            ("define-key" code nil nil [38292 38345])
            ("define-key" code nil nil [38346 38412])
            ("define-key" code nil nil [38522 38578])
            ("define-key" code nil nil [38579 38625])
            ("define-key" code nil nil [38822 38879])
            ("define-key" code nil nil [38880 38935])
            ("define-key" code nil nil [38936 38990])
            ("define-key" code nil nil [38991 39058])
            ("define-key" code nil nil [39059 39124])
            ("define-key" code nil nil [39125 39167])
            ("define-key" code nil nil [39168 39212])
            ("define-key" code nil nil [39213 39257])
            ("define-key" code nil nil [39258 39300])
            ("define-key" code nil nil [39301 39354])
            ("define-key" code nil nil [39355 39405])
            ("define-key" code nil nil [39406 39457])
            ("define-key" code nil nil [39458 39510])
            ("define-key" code nil nil [39511 39558])
            ("put" code nil nil [39559 39589])
            ("define-key" code nil nil [39590 39636])
            ("define-key" code nil nil [39637 39691])
            ("define-key" code nil nil [39692 39744])
            ("define-key" code nil nil [39745 39804])
            ("define-key" code nil nil [39805 39863])
            ("define-key" code nil nil [39864 39922])
            ("define-key" code nil nil [39923 39971])
            ("define-key" code nil nil [39972 40019])
            ("define-key" code nil nil [40020 40080])
            ("define-key" code nil nil [40081 40139])
            ("define-key" code nil nil [40140 40193])
            ("define-key" code nil nil [40194 40261])
            ("define-key" code nil nil [40262 40328])
            ("define-key" code nil nil [40440 40499])
            ("define-key" code nil nil [40500 40549])
            ("define-key" code nil nil [40550 40600])
            ("define-key" code nil nil [40601 40641])
            ("define-key" code nil nil [40740 40792])
            ("define-key" code nil nil [40793 40847])
            ("define-key" code nil nil [40848 40892])
            ("define-key" code nil nil [40893 40930])
            ("define-key" code nil nil [40931 40986])
            ("define-key" code nil nil [40987 41043])
            ("define-key" code nil nil [41059 41101])
            ("define-key" code nil nil [41333 41380])
            ("define-key" code nil nil [41381 41428])
            ("define-key" code nil nil [41429 41486])
            ("let" code nil nil [45447 46293])
            ("define-key" code nil nil [46295 46344])
            ("define-key" code nil nil [46345 46391])
            ("define-key" code nil nil [46392 46441])
            ("define-key" code nil nil [47608 47654])
            ("define-key" code nil nil [47776 47823])
            ("define-key" code nil nil [47825 47873])
            ("define-key" code nil nil [47875 47922])
            ("define-key" code nil nil [47923 47964])
            ("define-key" code nil nil [47965 48009])
            ("define-key" code nil nil [48010 48056])
            ("define-key" code nil nil [48058 48096])
            ("define-key" code nil nil [48097 48146])
            ("define-key" code nil nil [48147 48199])
            ("define-key" code nil nil [48200 48246])
            ("define-key" code nil nil [48247 48292])
            ("define-key" code nil nil [48293 48336])
            ("define-key" code nil nil [48337 48386])
            ("define-key" code nil nil [48388 48423])
            ("define-key" code nil nil [48424 48462])
            ("define-key" code nil nil [48463 48502])
            ("define-key" code nil nil [48503 48538])
            ("define-key" code nil nil [48539 48586])
            ("define-key" code nil nil [48588 48633])
            ("define-key" code nil nil [48634 48673])
            ("define-key" code nil nil [48674 48719])
            ("define-key" code nil nil [48720 48770])
            ("defalias" code nil nil [48772 48833])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [48834 48949])
            ("define-key" code nil nil [48950 49010])
            ("global-set-key" code nil nil [49012 49051])
            ("define-key" code nil nil [49052 49094])
            ("global-set-key" code nil nil [49095 49133])
            ("define-key" code nil nil [49134 49176])
            ("global-set-key" code nil nil [49253 49292])
            ("global-set-key" code nil nil [49293 49331])
            ("global-set-key" code nil nil [49391 49429])
            ("global-set-key" code nil nil [49430 49480])
            ("global-set-key" code nil nil [49541 49581])
            ("global-set-key" code nil nil [49583 49628])
            ("define-key" code nil nil [49629 49674])
            ("global-set-key" code nil nil [49675 49719])
            ("define-key" code nil nil [49720 49764])
            ("global-set-key" code nil nil [49765 49813])
            ("define-key" code nil nil [49814 49862])
            ("global-set-key" code nil nil [49863 49904])
            ("define-key" code nil nil [49905 49946])
            ("global-set-key" code nil nil [49947 49997])
            ("define-key" code nil nil [49998 50048])
            ("global-set-key" code nil nil [50049 50093])
            ("define-key" code nil nil [50094 50138])
            ("define-key" code nil nil [50140 50181])
            ("define-key" code nil nil [50182 50224])
            ("define-key" code nil nil [50225 50270])
            ("define-key" code nil nil [50271 50309])
            ("define-key" code nil nil [50310 50350])
            ("define-key" code nil nil [50351 50389])
            ("define-key" code nil nil [50390 50428])
            ("define-key" code nil nil [50646 50697])
            ("define-key" code nil nil [50698 50752])
            ("define-key" code nil nil [50753 50794])
            ("define-key" code nil nil [50795 50837])
            ("define-key" code nil nil [50838 50885])
            ("define-key" code nil nil [50886 50927])
            ("define-key" code nil nil [50928 50967])
            ("define-key" code nil nil [50968 51012])
            ("define-key" code nil nil [51013 51057])
            ("define-key" code nil nil [51058 51112])
            ("define-key" code nil nil [51114 51159])
            ("define-key" code nil nil [51161 51201])
            ("define-key" code nil nil [51202 51257])
            ("define-key" code nil nil [51258 51312])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [51316 52372])
            ("define-key" code nil nil [52373 52411])
            ("define-key" code nil nil [52413 52453])
            ("define-key" code nil nil [52454 52497])
            ("define-key" code nil nil [52500 52544])
            ("define-key" code nil nil [52545 52588])
            ("define-key" code nil nil [52589 52629])
            ("define-key" code nil nil [52630 52673])
            ("define-key" code nil nil [52674 52716])
            ("define-key" code nil nil [52717 52756])
            ("define-key" code nil nil [52757 52810])
            ("define-key" code nil nil [52812 52853])
            ("define-key" code nil nil [52854 52894])
            ("define-key" code nil nil [52895 52935])
            ("define-key" code nil nil [52936 52980])
            ("define-key" code nil nil [52981 53024])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [53073 53145])
            ("define-key" code nil nil [53146 53183])
            ("define-key" code nil nil [53185 53229])
            ("define-key" code nil nil [53230 53277])
            ("define-key" code nil nil [53278 53324])
            ("define-key" code nil nil [53325 53369])
            ("define-key" code nil nil [53370 53425])
            ("define-key" code nil nil [53426 53479])
            ("define-key" code nil nil [53541 53595])
            ("define-key" code nil nil [53596 53638])
            ("define-key" code nil nil [53639 53681])
            ("define-key" code nil nil [53896 53940])
            ("define-key" code nil nil [53941 53982])
            ("define-key" code nil nil [53983 54026])
            ("define-key" code nil nil [54028 54062])
            ("define-key" code nil nil [54064 54110])
            ("define-key" code nil nil [54112 54175])
            ("define-key" code nil nil [54176 54240])
            ("define-key" code nil nil [54261 54309])
            ("define-key" code nil nil [54310 54358]))          
      :file "bindings.el.gz"
      :pointmax 54490
      :fsize 13590
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.2!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
