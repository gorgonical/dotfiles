;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("VERSION" variable (:default-value ("1")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("3")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("0")) nil [28 41])
            ("EXTRAVERSION" variable (:default-value ("Kitten")) nil [41 63])
            ("NAME" variable (:default-value ("Kitten")) nil [63 75])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [358 392])
            ("PHONY" variable (:default-value ("_all")) nil [2894 2908])
            ("_all" function nil nil [2908 2914])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [3066 3099])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell cd $(KBUILD_OUTPUT) && /bin/pwd)")) nil [3099 3157])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)")) nil [3249 3274])
            ("_all" function nil nil [3275 3458])
            ("$(filter-out _all,$(MAKECMDGOALS))" function nil nil [3275 3458])
            ("skip-makefile" variable (:default-value ("1")) nil [3506 3525])
            ("PHONY" variable (:default-value ("all")) nil [3799 3812])
            ("_all" function (:arguments ("all")) nil [3837 3847])
            ("_all" function (:arguments ("modules")) nil [3852 3866])
            ("srctree" variable (:default-value ("$(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))")) nil [3873 3929])
            ("TOPDIR" variable (:default-value ("$(srctree)")) nil [3929 3951])
            ("objtree" variable (:default-value ("$(CURDIR)")) nil [4001 4023])
            ("src" variable (:default-value ("$(srctree)")) nil [4023 4042])
            ("obj" variable (:default-value ("$(objtree)")) nil [4042 4061])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [4062 4123])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ )")) nil [4499 4704])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [5706 5729])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [5729 5749])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [5861 6003])
            ("HOSTCC" variable (:default-value ("gcc")) nil [6004 6019])
            ("HOSTCXX" variable (:default-value ("g++")) nil [6019 6035])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-Wno-unused" "-Wno-format-security" "-U_FORTIFY_SOURCE")) nil [6035 6155])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [6155 6174])
            ("KBUILD_MODULES" variable nil nil [6261 6279])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [6279 6299])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(srctree)")) nil [8262 8300])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [8336 8379])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [8513 8538])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [8538 8563])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc-8")) nil [8563 8591])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [8591 8607])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [8607 8632])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [8632 8657])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [8657 8688])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [8688 8723])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [8723 8758])
            ("AWK" variable (:default-value ("awk")) nil [8758 8769])
            ("GENKSYMS" variable (:default-value ("scripts/genksyms/genksyms")) nil [8769 8806])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [8806 8829])
            ("KALLSYMS" variable (:default-value ("scripts/kallsyms")) nil [8829 8857])
            ("PERL" variable (:default-value ("perl")) nil [8857 8870])
            ("CHECK" variable (:default-value ("sparse")) nil [8870 8886])
            ("CHECKFLAGS" variable (:default-value ("-D__lwk__" "-Dlwk" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "$(CF)")) nil [8887 8966])
            ("MODFLAGS" variable (:default-value ("-DMODULE")) nil [8966 8986])
            ("CFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [8986 9016])
            ("AFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [9016 9046])
            ("LDFLAGS_MODULE" variable (:default-value ("-r")) nil [9046 9067])
            ("CFLAGS_KERNEL" variable nil nil [9067 9083])
            ("AFLAGS_KERNEL" variable nil nil [9083 9099])
            ("LINUX_INCLUDE" variable (:default-value ("-Iofed/include")) nil [9099 9132])
            ("LWKINCLUDE" variable (:default-value ("-Iinclude" "-Iinclude/hafnium/vmapi" "$(LINUX_INCLUDE)" "$(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include)" "-include" "include/lwk/autoconf.h")) nil [9244 9417])
            ("CPPFLAGS" variable (:default-value ("-D__KERNEL__" "$(LWKINCLUDE)" "-D__LWK__")) nil [9419 9475])
            ("CFLAGS" variable (:default-value ("-std=gnu99" "-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-strict-overflow" "-fno-common" "-fno-pie")) nil [9476 9625])
            ("CFLAGS" variable (:default-value ("-fno-stack-protector")) nil [9675 9707])
            ("CFLAGS" variable (:default-value ("-fgnu89-inline")) nil [9760 9786])
            ("AFLAGS" variable (:default-value ("-D__ASSEMBLY__")) nil [9793 9819])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat .kernelrelease 2> /dev/null)")) nil [9876 9933])
            ("KERNELVERSION" variable (:default-value ("$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)")) nil [9933 10001])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10560 10647])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10560 10647])
            ("RCS_FIND_IGNORE" variable (:default-value ("\\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [10690 10822])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10822 10954])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10822 10954])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [11125 11148])
            ("scripts_basic" function nil nil [11148 11199])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [11266 11299])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [11300 11324])
            ("outputmakefile" function nil nil [11489 11505])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "TAGS" "tags" "help" "%docs" "check%")) nil [12073 12164])
            ("config-targets" variable (:default-value ("0")) nil [12165 12185])
            ("mixed-targets" variable (:default-value ("0")) nil [12185 12205])
            ("dot-config" variable (:default-value ("1")) nil [12205 12225])
            ("%" function (:arguments ("FORCE")) nil [12853 12905])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [13302 13346])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13371 13535])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13536 13701])
            ("PHONY" variable (:default-value ("scripts")) nil [14077 14094])
            ("scripts" function (:arguments ("scripts_basic" "include/config/MARKER")) nil [14094 14166])
            ("scripts_basic" function (:arguments ("include/lwk/autoconf.h")) nil [14167 14205])
            ("drivers-y" variable (:default-value ("drivers/")) nil [14267 14289])
            ("net-y" variable (:default-value ("net/")) nil [14289 14304])
            ("block-y" variable (:default-value ("block/")) nil [14304 14330])
            ("libs-y" variable (:default-value ("lib/")) nil [14330 14346])
            ("ofed-y" variable (:default-value ("ofed/")) nil [14366 14391])
            (".config" include nil nil [14611 14627])
            (".kconfig.d" function (:arguments (";")) nil [14794 14816])
            (".config" function (:arguments (";")) nil [14794 14816])
            ("include/lwk/autoconf.h" function (:arguments (".kconfig.d" ".config")) nil [15068 15189])
            ("include/lwk/autoconf.h" function (:arguments (";")) nil [15246 15272])
            ("DEFAULT_EXTRA_TARGETS" variable (:default-value ("vmlwk.bin" "vmlwk.asm" "init_task")) nil [15279 15331])
            ("all" function (:arguments ("vmlwk" "$(DEFAULT_EXTRA_TARGETS)")) nil [15555 15591])
            ("CFLAGS" variable (:default-value ("-Os")) nil [15626 15641])
            ("CFLAGS" variable (:default-value ("-O2")) nil [15646 15661])
            ("CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "$(call cc-option,-fno-optimize-sibling-calls,)")) nil [15695 15777])
            ("CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [15782 15814])
            ("CFLAGS" variable (:default-value ("-fasynchronous-unwind-tables")) nil [15846 15886])
            ("CFLAGS" variable (:default-value ("-g")) nil [15917 15931])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [15938 15982])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [16060 16137])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [16137 16173])
            ("CFLAGS" variable (:default-value ("$(call cc-option,-Wno-pointer-sign,)")) nil [16223 16270])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [16911 16969])
            ("core-y" variable (:default-value ("kernel/" "modules/")) nil [17064 17092])
            ("vmlwk-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(ofed-y) $(ofed-m)\\
		     $(net-y) $(net-m) $(block-y) $(block-m) $(libs-y) $(libs-m)))")) nil [17093 17310])
            ("vmlwk-alldirs" variable (:default-value ("$(sort $(vmlwk-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-n) $(init-) \\
		     $(core-n) $(core-) $(drivers-n) $(drivers-) \\
		     $(ofed-n) $(ofed-) \\
		     $(net-n)  $(net-) $(block-n) $(block-)  $(libs-n)    $(libs-))))")) nil [17311 17561])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [17562 17613])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [17613 17664])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [17664 17720])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [17720 17769])
            ("block-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(block-y))")) nil [17769 17829])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [17829 17876])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [17876 17928])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [17928 17961])
            ("ofed-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(ofed-y))")) nil [18015 18074])
            ("v3vee-objs" variable nil nil [19187 19201])
            ("v3vee-objs" variable (:default-value ("$(CONFIG_PALACIOS_PATH)/libv3vee.a")) nil [19224 19273])
            ("v3vee" function (:arguments ("FORCE")) nil [19280 19293])
            ("vmlwk-init" variable (:default-value ("$(head-y)" "$(init-y)")) nil [19355 19389])
            ("vmlwk-main" variable (:default-value ("$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)" "$(block-y)" "$(ofed-y)")) nil [19389 19466])
            ("vmlwk-all" variable (:default-value ("$(vmlwk-init)" "$(vmlwk-main)")) nil [19466 19508])
            ("vmlwk-lds" variable (:default-value ("arch/$(SRCARCH)/kernel/vmlwk.lds")) nil [19508 19555])
            ("quiet_cmd_vmlwk_version" variable (:default-value ("GEN" ".version")) nil [20008 20051])
            ("quiet_cmd_sysmap" variable (:default-value ("SYSMAP")) nil [20344 20371])
            ("last_kallsyms" variable (:default-value ("3")) nil [22187 22206])
            ("last_kallsyms" variable (:default-value ("2")) nil [22211 22230])
            ("kallsyms.o" variable (:default-value (".tmp_kallsyms$(last_kallsyms).o")) nil [22237 22283])
            ("cmd_ksym_ld" variable (:default-value ("$(cmd_vmlwk__)")) nil [22845 22874])
            ("quiet_cmd_kallsyms" variable (:default-value ("KSYM" "$@")) nil [23053 23085])
            (".tmp_kallsyms2.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23204 23310])
            (".tmp_kallsyms1.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23204 23310])
            (".tmp_kallsyms%.S" function (:arguments (".tmp_vmlwk%" "$(KALLSYMS)")) nil [23311 23375])
            (".tmp_vmlwk1" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" "FORCE")) nil [23448 23526])
            (".tmp_vmlwk2" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms1.o" "FORCE")) nil [23527 23617])
            (".tmp_vmlwk3" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms2.o" "FORCE")) nil [23618 23708])
            ("$(KALLSYMS)" function (:arguments ("scripts" ";")) nil [23767 23790])
            ("debug_kallsyms" function (:arguments (".tmp_map$(last_kallsyms)")) nil [23852 23893])
            (".tmp_map%" function (:arguments (".tmp_vmlwk%" "FORCE")) nil [23894 24008])
            (".tmp_map3" function (:arguments (".tmp_map2")) nil [24009 24030])
            (".tmp_map2" function (:arguments (".tmp_map1")) nil [24031 24052])
            ("vmlwk" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-init)" "$(vmlwk-main)" "v3vee" "$(kallsyms.o)" "FORCE")) nil [24134 24265])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24435 24557])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24562 24607])
            ("vmlwk.asm" function (:arguments ("vmlwk")) nil [24614 24665])
            ("$(vmlwk-lds)" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24757 24823])
            ("$(sort $(vmlwk-init) $(vmlwk-main))" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24757 24823])
            ("PHONY" variable (:default-value ("$(vmlwk-dirs)")) nil [25106 25129])
            ("$(vmlwk-dirs)" function (:arguments ("prepare" "scripts")) nil [25129 25185])
            ("nullstring" variable nil nil [25553 25567])
            ("space" variable (:default-value ("$(nullstring)")) nil [25567 25609])
            ("___localver" variable (:default-value ("$(objtree)/localversion*" "$(srctree)/localversion*")) nil [25610 25674])
            ("__localver" variable (:default-value ("$(sort $(wildcard $(___localver)))")) nil [25674 25723])
            ("_localver" variable (:default-value ("$(foreach f, $(__localver), $(if $(findstring ~, $(f)),,$(f)))")) nil [25760 25835])
            ("localver" variable (:default-value ("$(subst $(space),, \\
	   $(shell cat /dev/null $(_localver)) \\
	   $(patsubst \"%\",%,$(CONFIG_LOCALVERSION)))")) nil [25836 25956])
            ("localver-full" variable (:default-value ("$(localver)$(localver-auto)")) nil [26491 26535])
            ("kernelrelease" variable (:default-value ("$(KERNELVERSION)$(localver-full)")) nil [26588 26637])
            (".kernelrelease" function (:arguments ("FORCE")) nil [26637 26705])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [27052 27117])
            ("PHONY" variable (:default-value ("prepare-all")) nil [27180 27201])
            ("prepare3" function (:arguments (".kernelrelease")) nil [27438 27463])
            ("prepare2" function (:arguments ("prepare3" "outputmakefile")) nil [28037 28071])
            ("prepare1" function (:arguments ("prepare2" "include/lwk/version.h" "include/arch" "linux/include/asm" "include/config/MARKER")) nil [28072 28187])
            ("archprepare" function (:arguments ("prepare1" "scripts_basic")) nil [28274 28310])
            ("prepare0" function (:arguments ("archprepare" "FORCE")) nil [28311 28363])
            ("prepare-all" function (:arguments ("prepare0")) nil [28386 28416])
            ("prepare" function (:arguments ("prepare0")) nil [28386 28416])
            ("include/arch" function (:arguments ("FORCE")) nil [28678 29557])
            ("linux/include/asm" function (:arguments ("FORCE")) nil [29558 30466])
            ("include/config/MARKER" function (:arguments ("scripts/basic/split-include" "include/lwk/autoconf.h")) nil [30514 30729])
            ("uts_len" variable (:default-value ("64")) nil [30967 30981])
            ("include/lwk/version.h" function (:arguments ("$(srctree)/Makefile" ".config" ".kernelrelease" "FORCE")) nil [31402 31501])
            ("PHONY" variable (:default-value ("depend" "dep")) nil [31581 31601])
            ("dep" function nil nil [31601 31663])
            ("depend" function nil nil [31601 31663])
            ("INSTALL_HDR_PATH" variable (:default-value ("$(MODLIB)/abi")) nil [31759 31790])
            ("PHONY" variable (:default-value ("headers_install")) nil [31815 31840])
            ("headers_install" function (:arguments ("include/lwk/version.h")) nil [31840 32018])
            ("PHONY" variable (:default-value ("headers_check")) nil [32019 32042])
            ("headers_check" function (:arguments ("headers_install")) nil [32042 32156])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [32501 32529])
            ("CLEAN_FILES" variable (:default-value ("vmlwk" "System.map" "vmlwk.bin" "vmlwk.asm" ".tmp_kallsyms*" ".tmp_version" ".tmp_vmlwk*" ".tmp_System.map")) nil [32529 32655])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "include2")) nil [32707 32749])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" "include/arch" "linux/include/asm" ".version" ".old_version" "include/lwk/autoconf.h" "include/lwk/version.h" ".kernelrelease" "Module.symvers" "tags" "TAGS" "cscope*")) nil [32749 32959])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [33028 33061])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [33061 33095])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(srctree) $(vmlwk-alldirs))")) nil [33095 33163])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean")) nil [33164 33203])
            ("$(clean-dirs)" function nil nil [33203 33266])
            ("clean" function (:arguments ("archclean" "$(clean-dirs)")) nil [33267 33589])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [33651 33702])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [33702 33754])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_, scripts)")) nil [33831 33886])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [33887 33935])
            ("$(mrproper-dirs)" function nil nil [33935 34004])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [34005 34092])
            ("PHONY" variable (:default-value ("distclean")) nil [34107 34126])
            ("distclean" function (:arguments ("mrproper")) nil [34127 34415])
            ("package-dir" variable (:default-value ("$(srctree)/scripts/package")) nil [34585 34627])
            ("%pkg" function (:arguments ("FORCE")) nil [34628 34680])
            ("rpm" function (:arguments ("FORCE")) nil [34680 34731])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [34862 34931])
            ("boards" variable (:default-value ("$(notdir $(boards))")) nil [34931 34961])
            ("help" function nil nil [34962 36674])
            ("%docs" function (:arguments ("scripts_basic" "FORCE")) nil [37238 37312])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [38095 38115])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [38115 38136])
            ("crmodverdir" function nil nil [38136 38202])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [38203 38257])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [38257 38289])
            ("$(module-dirs)" function (:arguments ("crmodverdir")) nil [38289 38366])
            ("modules" function (:arguments ("$(module-dirs)")) nil [38367 38430])
            ("PHONY" variable (:default-value ("modules_install")) nil [38488 38513])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [38513 38556])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [38557 38622])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [38622 38642])
            ("_emodinst_" function nil nil [38642 38749])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [38815 38859])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [39174 39198])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [39198 39245])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [39246 39298])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [39299 39328])
            ("$(clean-dirs)" function nil nil [39328 39391])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [39392 39423])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [39423 39658])
            ("help" function nil nil [39659 39981])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [39995 40020])
            ("prepare" function (:arguments (";")) nil [40020 40031])
            ("scripts" function (:arguments (";")) nil [40031 40042])
            ("__srctree" variable nil nil [40425 40437])
            ("__srctree" variable (:default-value ("$(srctree)/")) nil [40442 40466])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)" "$(SUBARCH)")) nil [40518 40557])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40562 40590])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ALLSOURCE_ARCHS)")) nil [40694 40733])
            ("ALLSOURCE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40740 40767])
            ("quiet_cmd_cscope-file" variable (:default-value ("FILELST" "cscope.files")) nil [41915 41960])
            ("quiet_cmd_cscope" variable (:default-value ("MAKE" "cscope.out")) nil [42037 42075])
            ("cscope" function (:arguments ("FORCE")) nil [42105 42164])
            ("quiet_cmd_TAGS" variable (:default-value ("MAKE" "$@")) nil [42165 42192])
            ("TAGS" function (:arguments ("FORCE")) nil [42566 42596])
            ("quiet_cmd_tags" variable (:default-value ("MAKE" "$@")) nil [42598 42625])
            ("tags" function (:arguments ("FORCE")) nil [42999 43029])
            ("includecheck" function nil nil [43160 43291])
            ("versioncheck" function nil nil [43292 43422])
            ("namespacecheck" function nil nil [43423 43480])
            ("PHONY" variable (:default-value ("checkstack")) nil [43549 43569])
            ("checkstack" function nil nil [43569 43679])
            ("kernelrelease" function nil nil [43680 43827])
            ("kernelversion" function nil nil [43827 43866])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44522 44614])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44614 44706])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44706 44798])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44798 44892])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44892 44984])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44984 45076])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45087 45191])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45191 45296])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [45296 45473])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [45601 45680])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [45718 45800])
            ("a_flags" variable (:default-value ("-Wp,-MD,$(depfile)" "$(AFLAGS)" "$(AFLAGS_KERNEL)" "$(NOSTDINC_FLAGS)" "$(CPPFLAGS)" "$(modkern_aflags)" "$(EXTRA_AFLAGS)" "$(AFLAGS_$(*F).o)")) nil [45840 45988])
            ("quiet_cmd_as_o_S" variable (:default-value ("AS" "$@")) nil [45989 46019])
            ("cmd_as_o_S" variable (:default-value ("$(CC)" "$(a_flags)" "-c" "-o" "$@" "$<")) nil [46019 46067])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [46100 46142])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [46142 46229])
            ("clean" variable (:default-value ("-f" "$(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean" "obj")) nil [46447 46517])
            ("init_task" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46608 46650])
            ("user" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46608 46650])
            ("user" function (:arguments ("FORCE")) nil [46704 46842])
            ("init_task" function (:arguments ("user" "FORCE")) nil [46899 46971])
            ("PHONY" variable (:default-value ("FORCE")) nil [46972 46987])
            ("FORCE" function nil nil [46987 46994]))          
      :file "Makefile"
      :pointmax 47155
      :fsize 47154
      :lastmodtime '(24804 59869)
      :unmatched-syntax '((semantic-list 47147 . 47154) (punctuation 47146 . 47147) (punctuation 47144 . 47145) (symbol 47138 . 47144) (bol 47138 . 47138) (ENDIF 46518 . 46523) (bol 46518 . 46518) (semantic-list 46330 . 46341) (punctuation 46329 . 46330) (INCLUDE 46321 . 46328) (bol 46319 . 46319) (punctuation 46268 . 46269) (punctuation 46266 . 46267) (semantic-list 46255 . 46266) (punctuation 46254 . 46255) (bol 46252 . 46252) (semantic-list 45827 . 45837) (punctuation 45826 . 45827) (symbol 45823 . 45825) (symbol 45820 . 45822) (punctuation 45818 . 45819) (symbol 45806 . 45817) (bol 45800 . 45800) (semantic-list 45707 . 45716) (punctuation 45706 . 45707) (symbol 45702 . 45705) (symbol 45699 . 45701) (punctuation 45697 . 45698) (symbol 45686 . 45696) (bol 45680 . 45680) (semantic-list 44473 . 44514) (punctuation 44472 . 44473) (punctuation 44470 . 44471) (symbol 44459 . 44469) (bol 44451 . 44451) (semantic-list 44419 . 44450) (punctuation 44418 . 44419) (semantic-list 44403 . 44418) (punctuation 44402 . 44403) (punctuation 44400 . 44401) (symbol 44389 . 44398) (bol 44381 . 44381) (semantic-list 44339 . 44380) (punctuation 44338 . 44339) (punctuation 44337 . 44338) (symbol 44328 . 44337) (bol 44320 . 44320) (semantic-list 44306 . 44314) (punctuation 44305 . 44306) (punctuation 44303 . 44304) (symbol 44292 . 44302) (bol 44284 . 44284) (semantic-list 44258 . 44283) (punctuation 44257 . 44258) (punctuation 44255 . 44256) (symbol 44244 . 44253) (bol 44236 . 44236) (ENDIF 43515 . 43520) (bol 43515 . 43515) (ENDIF 43481 . 43486) (bol 43481 . 43481) (symbol 42992 . 42997) (bol 42992 . 42992) (shell-command 42642 . 42991) (bol 42641 . 42641) (symbol 42632 . 42640) (symbol 42625 . 42631) (bol 42625 . 42625) (symbol 42559 . 42564) (bol 42559 . 42559) (shell-command 42209 . 42558) (bol 42208 . 42208) (symbol 42199 . 42207) (symbol 42192 . 42198) (bol 42192 . 42192) (symbol 42101 . 42103) (symbol 42094 . 42100) (punctuation 42092 . 42093) (symbol 42081 . 42091) (bol 42075 . 42075) (symbol 42023 . 42035) (symbol 42021 . 42022) (semantic-list 41984 . 42020) (punctuation 41982 . 41983) (symbol 41966 . 41981) (bol 41960 . 41960) (symbol 41908 . 41913) (bol 41908 . 41908) (shell-command 40788 . 41907) (bol 40787 . 40787) (symbol 40775 . 40786) (symbol 40768 . 40774) (bol 40768 . 40768) (ENDIF 40042 . 40047) (bol 40042 . 40042) (symbol 39170 . 39172) (punctuation 39125 . 39126) (semantic-list 39110 . 39125) (punctuation 39109 . 39110) (semantic-list 39010 . 39085) (punctuation 39009 . 39010) (symbol 38962 . 38972) (symbol 38959 . 38961) (symbol 38955 . 38958) (semantic-list 38946 . 38954) (punctuation 38945 . 38946) (symbol 38916 . 38920) (punctuation 38914 . 38915) (semantic-list 38881 . 38914) (IF 38878 . 38880) (punctuation 38876 . 38877) (symbol 38865 . 38875) (bol 38859 . 38859) (ELSE 37313 . 37317) (bol 37313 . 37313) (shell-command 37086 . 37133) (bol 37085 . 37085) (shell-command 37009 . 37084) (bol 37008 . 37008) (shell-command 36998 . 37007) (bol 36997 . 36997) (shell-command 36915 . 36996) (bol 36914 . 36914) (shell-command 36841 . 36913) (bol 36840 . 36840) (shell-command 36756 . 36839) (bol 36755 . 36755) (shell-command 36676 . 36754) (bol 36675 . 36675) (symbol 31797 . 31813) (symbol 31790 . 31796) (bol 31790 . 31790) (symbol 31395 . 31400) (bol 31395 . 31395) (shell-command 31008 . 31394) (bol 31007 . 31007) (symbol 30989 . 31006) (symbol 30982 . 30988) (bol 30982 . 30982) (semantic-list 28566 . 28575) (punctuation 28565 . 28566) (symbol 28563 . 28565) (symbol 28560 . 28562) (symbol 28557 . 28559) (punctuation 28555 . 28556) (punctuation 28554 . 28555) (symbol 28535 . 28553) (symbol 28528 . 28534) (bol 28528 . 28528) (shell-command 28242 . 28266) (bol 28241 . 28241) (shell-command 28215 . 28240) (bol 28214 . 28214) (shell-command 27892 . 27962) (bol 27891 . 27891) (shell-command 27825 . 27890) (bol 27824 . 27824) (shell-command 27763 . 27823) (bol 27762 . 27762) (shell-command 27708 . 27761) (bol 27707 . 27707) (shell-command 27536 . 27706) (bol 27535 . 27535) (shell-command 27487 . 27534) (bol 27486 . 27486) (shell-command 26434 . 26483) (bol 26433 . 26433) (shell-command 26324 . 26432) (bol 26323 . 26323) (shell-command 25957 . 25964) (bol 25956 . 25956) (ENDIF 24053 . 24058) (bol 24053 . 24053) (punctuation 23201 . 23202) (punctuation 23200 . 23201) (symbol 23198 . 23199) (semantic-list 23156 . 23197) (punctuation 23155 . 23156) (semantic-list 23121 . 23131) (punctuation 23120 . 23121) (symbol 23118 . 23119) (symbol 23116 . 23117) (punctuation 23115 . 23116) (symbol 23112 . 23114) (semantic-list 23107 . 23111) (punctuation 23106 . 23107) (punctuation 23104 . 23105) (symbol 23091 . 23103) (bol 23085 . 23085) (symbol 23003 . 23008) (bol 23003 . 23003) (shell-command 22948 . 23002) (bol 22947 . 22947) (shell-command 22927 . 22946) (bol 22926 . 22926) (shell-command 22899 . 22925) (bol 22898 . 22898) (shell-command 22895 . 22897) (bol 22894 . 22894) (symbol 22881 . 22893) (symbol 22874 . 22880) (bol 22874 . 22874) (symbol 22674 . 22679) (bol 22674 . 22674) (shell-command 22482 . 22673) (bol 22481 . 22481) (shell-command 22308 . 22480) (bol 22307 . 22307) (symbol 22291 . 22306) (symbol 22284 . 22290) (bol 22284 . 22284) (symbol 21184 . 21189) (bol 21184 . 21184) (shell-command 21165 . 21183) (bol 21164 . 21164) (shell-command 20868 . 21163) (bol 20867 . 20867) (shell-command 20811 . 20865) (bol 20810 . 20810) (shell-command 20790 . 20809) (bol 20789 . 20789) (shell-command 20735 . 20787) (bol 20734 . 20734) (shell-command 20732 . 20733) (bol 20731 . 20731) (symbol 20718 . 20730) (symbol 20711 . 20717) (bol 20711 . 20711) (symbol 20416 . 20433) (semantic-list 20407 . 20416) (punctuation 20406 . 20407) (semantic-list 20391 . 20405) (punctuation 20390 . 20391) (punctuation 20388 . 20389) (symbol 20377 . 20387) (bol 20371 . 20371) (symbol 20314 . 20320) (punctuation 20313 . 20314) (semantic-list 20306 . 20313) (punctuation 20305 . 20306) (semantic-list 20298 . 20304) (punctuation 20297 . 20298) (punctuation 20287 . 20288) (symbol 20285 . 20287) (punctuation 20280 . 20281) (symbol 20271 . 20280) (symbol 20269 . 20270) (punctuation 20267 . 20268) (semantic-list 20248 . 20266) (punctuation 20247 . 20248) (punctuation 20246 . 20247) (symbol 20245 . 20246) (symbol 20240 . 20244) (punctuation 20231 . 20232) (symbol 20219 . 20231) (symbol 20210 . 20218) (symbol 20207 . 20209) (ELSE 20192 . 20196) (punctuation 20184 . 20185) (symbol 20175 . 20184) (symbol 20173 . 20174) (symbol 20168 . 20172) (punctuation 20158 . 20159) (symbol 20150 . 20158) (symbol 20147 . 20149) (symbol 20144 . 20146) (symbol 20132 . 20136) (punctuation 20130 . 20131) (semantic-list 20113 . 20130) (IF 20110 . 20112) (punctuation 20083 . 20084) (symbol 20081 . 20083) (symbol 20077 . 20080) (punctuation 20075 . 20076) (symbol 20057 . 20074) (bol 20051 . 20051) (semantic-list 19908 . 19977) (punctuation 19907 . 19908) (symbol 19870 . 19881) (semantic-list 19857 . 19869) (punctuation 19856 . 19857) (semantic-list 19843 . 19855) (punctuation 19842 . 19843) (symbol 19828 . 19841) (semantic-list 19780 . 19792) (punctuation 19779 . 19780) (semantic-list 19767 . 19778) (punctuation 19766 . 19767) (symbol 19763 . 19765) (punctuation 19751 . 19752) (punctuation 19750 . 19751) (symbol 19747 . 19749) (semantic-list 19731 . 19746) (punctuation 19730 . 19731) (semantic-list 19720 . 19729) (punctuation 19719 . 19720) (semantic-list 19714 . 19718) (punctuation 19713 . 19714) (punctuation 19711 . 19712) (punctuation 19710 . 19711) (symbol 19698 . 19709) (bol 19692 . 19692) (punctuation 19690 . 19691) (punctuation 19689 . 19690) (symbol 19681 . 19683) (punctuation 19679 . 19680) (punctuation 19678 . 19679) (symbol 19660 . 19677) (bol 19660 . 19660) (shell-command 19316 . 19347) (bol 19315 . 19315) (symbol 16976 . 16982) (symbol 16969 . 16975) (bol 16969 . 16969) (symbol 16701 . 16706) (punctuation 16699 . 16700) (punctuation 16698 . 16699) (symbol 16685 . 16697) (symbol 16678 . 16684) (bol 16678 . 16678) (symbol 16532 . 16537) (punctuation 16530 . 16531) (punctuation 16529 . 16530) (symbol 16516 . 16528) (symbol 16509 . 16515) (bol 16509 . 16509) (symbol 14599 . 14609) (symbol 14590 . 14598) (bol 14590 . 14590) (ENDIF 14408 . 14413) (bol 14408 . 14408) (symbol 13353 . 13369) (symbol 13346 . 13352) (bol 13346 . 13346) (ENDIF 12646 . 12651) (bol 12638 . 12638) (ENDIF 12632 . 12637) (bol 12616 . 12616) (symbol 12614 . 12615) (punctuation 12612 . 12613) (punctuation 12611 . 12612) (symbol 12597 . 12610) (bol 12573 . 12573) (semantic-list 12525 . 12572) (IFNEQ 12519 . 12524) (bol 12503 . 12503) (symbol 12501 . 12502) (punctuation 12499 . 12500) (punctuation 12498 . 12499) (symbol 12483 . 12497) (bol 12467 . 12467) (semantic-list 12423 . 12466) (IFNEQ 12417 . 12422) (bol 12409 . 12409) (shell-command 12371 . 12376) (bol 12370 . 12370) (shell-command 12353 . 12369) (bol 12352 . 12352) (shell-command 12288 . 12351) (bol 12287 . 12287) (shell-command 11529 . 11632) (bol 11528 . 11528) (symbol 10397 . 10410) (symbol 10383 . 10396) (symbol 10376 . 10382) (symbol 10369 . 10375) (bol 10369 . 10369) (symbol 10354 . 10367) (symbol 10340 . 10353) (symbol 10333 . 10339) (symbol 10326 . 10332) (bol 10326 . 10326) (symbol 10318 . 10325) (symbol 10305 . 10317) (symbol 10294 . 10304) (symbol 10279 . 10293) (symbol 10270 . 10278) (symbol 10263 . 10269) (bol 10263 . 10263) (symbol 10250 . 10260) (symbol 10244 . 10249) (symbol 10229 . 10243) (symbol 10216 . 10228) (symbol 10208 . 10215) (symbol 10193 . 10204) (symbol 10188 . 10192) (symbol 10179 . 10187) (symbol 10175 . 10178) (symbol 10170 . 10174) (symbol 10162 . 10169) (symbol 10154 . 10161) (symbol 10148 . 10153) (symbol 10145 . 10147) (symbol 10142 . 10144) (symbol 10138 . 10141) (symbol 10132 . 10134) (symbol 10129 . 10131) (symbol 10126 . 10128) (symbol 10112 . 10125) (symbol 10101 . 10111) (symbol 10094 . 10100) (symbol 10081 . 10093) (symbol 10073 . 10080) (symbol 10068 . 10072) (symbol 10051 . 10064) (symbol 10037 . 10050) (symbol 10028 . 10036) (symbol 10017 . 10027) (symbol 10009 . 10016) (symbol 10002 . 10008) (bol 10002 . 10002) (symbol 8184 . 8198) (symbol 8182 . 8183) (symbol 8176 . 8181) (symbol 8169 . 8175) (bol 8169 . 8169) (symbol 8154 . 8161) (punctuation 8153 . 8154) (symbol 8148 . 8153) (bol 8146 . 8146) (punctuation 8019 . 8020) (punctuation 8017 . 8018) (symbol 8015 . 8016) (bol 8013 . 8013) (symbol 8006 . 8012) (punctuation 8005 . 8006) (symbol 8000 . 8005) (bol 7998 . 7998) (punctuation 7991 . 7992) (symbol 7989 . 7990) (bol 7987 . 7987) (punctuation 7985 . 7986) (symbol 7979 . 7984) (bol 7977 . 7977) (symbol 7006 . 7019) (symbol 6995 . 7005) (symbol 6979 . 6994) (symbol 6972 . 6978) (bol 6972 . 6972) (symbol 6957 . 6971) (symbol 6942 . 6956) (symbol 6935 . 6941) (bol 6935 . 6935) (symbol 6926 . 6927) (punctuation 6924 . 6925) (punctuation 6923 . 6924) (symbol 6908 . 6922) (bol 6906 . 6906) (symbol 6873 . 6874) (punctuation 6871 . 6872) (punctuation 6870 . 6871) (symbol 6855 . 6869) (bol 6853 . 6853) (semantic-list 6612 . 6640) (punctuation 6611 . 6612) (punctuation 6609 . 6610) (punctuation 6608 . 6609) (symbol 6593 . 6607) (bol 6591 . 6591) (symbol 5824 . 5830) (punctuation 5822 . 5823) (punctuation 5821 . 5822) (symbol 5813 . 5820) (bol 5805 . 5805) (symbol 5647 . 5665) (punctuation 5645 . 5646) (punctuation 5644 . 5645) (symbol 5630 . 5643) (bol 5630 . 5630) (semantic-list 5620 . 5629) (punctuation 5619 . 5620) (punctuation 5617 . 5618) (punctuation 5616 . 5617) (symbol 5610 . 5614) (bol 5610 . 5610) (symbol 4153 . 4159) (symbol 4147 . 4152) (symbol 4139 . 4146) (symbol 4131 . 4138) (symbol 4124 . 4130) (bol 4124 . 4124) (ENDIF 3559 . 3564) (bol 3559 . 3559) (ENDIF 3525 . 3530) (bol 3525 . 3525) (semantic-list 3158 . 3247) (punctuation 3157 . 3158) (bol 3157 . 3157) (ENDIF 2814 . 2819) (bol 2812 . 2812) (semantic-list 2808 . 2811) (punctuation 2807 . 2808) (punctuation 2805 . 2806) (punctuation 2804 . 2805) (symbol 2790 . 2803) (bol 2786 . 2786) (semantic-list 2754 . 2785) (IFEQ 2749 . 2753) (bol 2747 . 2747) (ENDIF 1908 . 1913) (bol 1906 . 1906) (semantic-list 1902 . 1905) (punctuation 1901 . 1902) (punctuation 1899 . 1900) (punctuation 1898 . 1899) (symbol 1884 . 1897) (bol 1880 . 1880) (semantic-list 1848 . 1879) (IFEQ 1843 . 1847) (bol 1841 . 1841) (semantic-list 1817 . 1826) (punctuation 1816 . 1817) (punctuation 1814 . 1815) (punctuation 1813 . 1814) (symbol 1799 . 1812) (bol 1797 . 1797) (symbol 1589 . 1590) (punctuation 1587 . 1588) (symbol 1571 . 1586) (bol 1569 . 1569) (ENDIF 1534 . 1539) (bol 1532 . 1532) (semantic-list 1528 . 1531) (punctuation 1527 . 1528) (punctuation 1525 . 1526) (symbol 1509 . 1524) (bol 1505 . 1505) (semantic-list 1473 . 1504) (IFEQ 1468 . 1472) (bol 1466 . 1466) (symbol 1357 . 1358) (punctuation 1355 . 1356) (symbol 1340 . 1354) (bol 1338 . 1338) (ENDIF 1304 . 1309) (bol 1302 . 1302) (semantic-list 1298 . 1301) (punctuation 1297 . 1298) (punctuation 1295 . 1296) (symbol 1280 . 1294) (bol 1276 . 1276) (semantic-list 1244 . 1275) (IFEQ 1239 . 1243) (bol 1237 . 1237))))
  :file "!ssh:nmg@desktop:!home!nmg!vm-shared!kitten-arm64!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
