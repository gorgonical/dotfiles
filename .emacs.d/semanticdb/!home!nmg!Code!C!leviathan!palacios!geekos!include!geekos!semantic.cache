;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("GEEKOS_IDT_H" variable (:constant-flag t) nil [278 290])
            ("geekos/int.h" include (:system-flag t) nil [292 315])
            ("NUM_IDT_ENTRIES" variable (:constant-flag t) nil [373 388])
            ("FIRST_EXCEPTION" variable (:constant-flag t) nil [439 454])
            ("NUM_EXCEPTIONS" variable (:constant-flag t) nil [465 479])
            ("FIRST_EXTERNAL_INT" variable (:constant-flag t) nil [533 551])
            ("NUM_EXTERNAL_INTS" variable (:constant-flag t) nil [563 580])
            ("Interrupt_Gate" type
               (:members 
                  ( ("offsetLow" variable (:type ("ushort_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [613 632])
                    ("segmentSelector" variable (:type ("ushort_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [637 662])
                    ("reserved" variable
                       (:suffix ":5"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [667 689])
                    ("signature" variable
                       (:suffix ":8"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [694 717])
                    ("dpl" variable
                       (:suffix ":2"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [722 739])
                    ("present" variable
                       (:suffix ":1"
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [744 765])
                    ("offsetHigh" variable (:type ("ushort_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [770 790]))                  
                :type "struct")
                nil [585 793])
            ("IDT_Descriptor" type
               (:members 
                  ( ("ig" variable (:type ("Interrupt_Gate" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [822 847]))                  
                :type "union")
                nil [795 955])
            ("DumpIDT" function
               (:prototype-flag t
                :type "void")
                nil [959 974])
            ("SerialDumpIDT" function
               (:prototype-flag t
                :type "void")
                nil [975 996])
            ("Init_IDT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1012 1017]))                  
                :type "void")
                nil [998 1018])
            ("Init_Interrupt_Gate" function
               (:prototype-flag t
                :arguments 
                  ( ("desc" variable
                       (:pointer 1
                        :type ("IDT_Descriptor" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1044 1071])
                    ("addr" variable (:type ("ulong_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1072 1085])
                    ("dpl" variable (:type "int") (reparse-symbol arg-sub-list) [1087 1095]))                  
                :type "void")
                nil [1019 1096])
            ("Install_Interrupt_Handler" function
               (:prototype-flag t
                :arguments 
                  ( ("interrupt" variable (:type "int") (reparse-symbol arg-sub-list) [1128 1142])
                    ("handler" variable (:type ("Interrupt_Handler" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1143 1169]))                  
                :type "void")
                nil [1097 1170])
            ("Load_IDTR" function
               (:prototype-flag t
                :arguments 
                  ( ("limitAndBase" variable
                       (:pointer 1
                        :type ("ushort_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1334 1357]))                  
                :type "void")
                nil [1319 1358]))          
      :file "idt.h"
      :pointmax 1387
      :fsize 1386
      :lastmodtime '(23849 13902 290288 940000)
      :unmatched-syntax nil
      :lexical-table 
        '(("NUM_EXCEPTIONS" . ((number "18" 480 . 482)))
          ("NUM_IDT_ENTRIES" . ((number "256" 389 . 392)))
          ("GEEKOS_IDT_H")
          ("FIRST_EXCEPTION" . ((number "0" 455 . 456)))
          ("FIRST_EXTERNAL_INT" . ((number "32" 552 . 554)))
          ("NUM_EXTERNAL_INTS" . ((number "16" 581 . 583)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("GEEKOS_IRQ_H" variable (:constant-flag t) nil [312 324])
            ("geekos/int.h" include (:system-flag t) nil [326 349])
            ("Install_IRQ" function
               (:prototype-flag t
                :arguments 
                  ( ("irq" variable (:type "int") (reparse-symbol arg-sub-list) [368 376])
                    ("handler" variable (:type ("Interrupt_Handler" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [377 403]))                  
                :type "void")
                nil [351 404])
            ("Get_IRQ_Mask" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [427 432]))                  
                :type ("ushort_t" type (:type "class") nil nil))
                nil [405 433])
            ("Set_IRQ_Mask" function
               (:prototype-flag t
                :arguments 
                  ( ("mask" variable (:type ("ushort_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [452 466]))                  
                :type "void")
                nil [434 467])
            ("Enable_IRQ" function
               (:prototype-flag t
                :arguments 
                  ( ("irq" variable (:type "int") (reparse-symbol arg-sub-list) [484 492]))                  
                :type "void")
                nil [468 493])
            ("Disable_IRQ" function
               (:prototype-flag t
                :arguments 
                  ( ("irq" variable (:type "int") (reparse-symbol arg-sub-list) [511 519]))                  
                :type "void")
                nil [494 520])
            ("Begin_IRQ" function
               (:prototype-flag t
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [613 643]))                  
                :type "void")
                nil [598 644])
            ("End_IRQ_num" function
               (:prototype-flag t
                :arguments 
                  ( ("irq" variable (:type "int") (reparse-symbol arg-sub-list) [662 670]))                  
                :type "void")
                nil [645 671])
            ("End_IRQ" function
               (:prototype-flag t
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [685 715]))                  
                :type "void")
                nil [672 716]))          
      :file "irq.h"
      :pointmax 745
      :fsize 744
      :lastmodtime '(23849 13902 303288 940000)
      :unmatched-syntax nil
      :lexical-table 
        '(("GEEKOS_IRQ_H")
          )
))
  :file "!home!nmg!Code!C!leviathan!palacios!geekos!include!geekos!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
