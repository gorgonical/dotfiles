;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("limits.h" include (:system-flag t) nil [432 451])
            ("geekos/io.h" include (:system-flag t) nil [452 474])
            ("geekos/int.h" include (:system-flag t) nil [475 498])
            ("geekos/irq.h" include (:system-flag t) nil [499 522])
            ("geekos/kthread.h" include (:system-flag t) nil [523 550])
            ("geekos/timer.h" include (:system-flag t) nil [551 576])
            ("geekos/serial.h" include (:system-flag t) nil [578 604])
            ("geekos/debug.h" include (:system-flag t) nil [605 630])
            ("geekos/io_defs.h" include (:system-flag t) nil [632 659])
            ("geekos/vmm_stubs.h" include (:system-flag t) nil [661 690])
            ("cpu_khz_freq" variable (:type ("uint_t" type (:type "class") nil nil)) nil [873 893])
            ("rdtscll" variable (:constant-flag t) nil [1061 1068])
            ("do_div" variable (:constant-flag t) nil [1331 1337])
            ("pit_calibrate_tsc" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2402 2407]))                  
                :type "unsigned int")
                nil [2363 3049])
            ("MAX_TIMER_EVENTS" variable (:constant-flag t) nil [3078 3094])
            ("timerDebug" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type "int")
                nil [3100 3126])
            ("timeEventCount" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3127 3153])
            ("nextEventID" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3154 3177])
            ("pendingTimerEvents" variable
               (:dereference 1
                :type ("timerEvent" type (:type "class") nil nil))
                nil [3178 3226])
            ("g_numTicks" variable
               (:typemodifiers ("volatile")
                :type ("ulong_t" type (:type "class") nil nil))
                nil [3260 3288])
            ("s_spinCountPerTick" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3364 3394])
            ("CALIBRATE_NUM_TICKS" variable (:constant-flag t) nil [3473 3492])
            ("DEFAULT_MAX_TICKS" variable (:constant-flag t) nil [3620 3637])
            ("g_Quantum" variable
               (:default-value "DEFAULT_MAX_TICKS"
                :type "int")
                nil [3669 3703])
            ("HZ" variable (:constant-flag t) nil [3807 3809])
            ("Debug" variable (:constant-flag t) nil [3939 3944])
            ("clock_time" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3981 3986]))                  
                :type ("ulong_t" type (:type "class") nil nil))
                nil [3962 4039])
            ("Timer_Interrupt_Handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4250 4280]))                  
                :type "void")
                nil [4214 5543])
            ("Timer_Calibrate" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5654 5684]))                  
                :type "void")
                nil [5626 6044])
            ("Spin" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("count" variable (:type "int") (reparse-symbol arg-sub-list) [6123 6133]))                  
                :type "void")
                nil [6106 6533])
            ("Calibrate_Delay" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6723 6728]))                  
                :type "void")
                nil [6695 7358])
            ("Init_Timer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7548 7553]))                  
                :type "void")
                nil [7532 8189])
            ("Start_Timer_Secs" function
               (:arguments 
                  ( ("seconds" variable (:type "int") (reparse-symbol arg-sub-list) [8213 8225])
                    ("cb" variable (:type ("timerCallback" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8226 8243])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8244 8255]))                  
                :type "int")
                nil [8192 8304])
            ("Start_Timer_MSecs" function
               (:arguments 
                  ( ("msecs" variable (:type "int") (reparse-symbol arg-sub-list) [8329 8339])
                    ("cb" variable (:type ("timerCallback" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8340 8357])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8358 8369]))                  
                :type "int")
                nil [8307 8456])
            ("Start_Timer" function
               (:arguments 
                  ( ("ticks" variable (:type "int") (reparse-symbol arg-sub-list) [8476 8486])
                    ("cb" variable (:type ("timerCallback" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8487 8504])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8505 8516]))                  
                :type "int")
                nil [8460 8984])
            ("Get_Remaining_Timer_Ticks" function
               (:arguments 
                  ( ("id" variable (:type "int") (reparse-symbol arg-sub-list) [9017 9024]))                  
                :type "int")
                nil [8987 9222])
            ("Get_Remaining_Timer_Secs" function
               (:arguments 
                  ( ("id" variable (:type "int") (reparse-symbol arg-sub-list) [9258 9265]))                  
                :type "double")
                nil [9226 9316])
            ("Get_Remaining_Timer_MSecs" function
               (:arguments 
                  ( ("id" variable (:type "int") (reparse-symbol arg-sub-list) [9349 9356]))                  
                :type "int")
                nil [9319 9416])
            ("Cancel_Timer" function
               (:arguments 
                  ( ("id" variable (:type "int") (reparse-symbol arg-sub-list) [9437 9444]))                  
                :type "int")
                nil [9420 9772])
            ("US_PER_TICK" variable (:constant-flag t) nil [9783 9794])
            ("Micro_Delay" function
               (:arguments 
                  ( ("us" variable (:type "int") (reparse-symbol arg-sub-list) [9956 9963]))                  
                :type "void")
                nil [9939 10235]))          
      :file "timer.c"
      :pointmax 10239
      :fsize 10238
      :lastmodtime '(23849 13902 755288 932000)
      :unmatched-syntax nil
      :lexical-table 
        '(("DEFAULT_MAX_TICKS" . ((number "4" 3638 . 3639)))
          ("Debug" (spp-arg-list ("args...") 3944 . 3953))
          ("rdtscll" (spp-arg-list ("val") 1068 . 1073) . 
              ((DO "do" 1074 . 1076) (semantic-list "{                                   \\
    unsigned int a,d;                                       \\
    asm volatile(\"rdtsc\" : \"=a\" (a), \"=d\" (d));             \\
    (val) = ((unsigned long)a) | (((unsigned long)d)<<32);  \\
  }" 1077 . 1304) (WHILE "while" 1305 . 1310) (semantic-list "(0)" 1310 . 1313)))
          ("MAX_TIMER_EVENTS" . ((number "100" 3095 . 3098)))
          ("US_PER_TICK" . ((semantic-list "(HZ * 1000000)" 9795 . 9809)))
          ("HZ" . ((number "100" 3810 . 3813)))
          ("CALIBRATE_NUM_TICKS" . ((number "3" 3493 . 3494)))
          ("do_div" (spp-arg-list ("n" "base") 1337 . 1345) . ((semantic-list "({				     \\
      unsigned long __upper, __low, __high, __mod, __base;   \\
      __base = (base);					     \\
      asm(\"\":\"=a\" (__low), \"=d\" (__high):\"A\" (n));	     \\
      __upper = __high;					     \\
      if (__high) {					     \\
	__upper = __high % (__base);			     \\
	__high = __high / (__base);			     \\
      }									\\
      asm(\"divl %2\":\"=a\" (__low), \"=d\" (__mod):\"rm\" (__base), \"0\" (__low), \"1\" (__upper)); \\
      asm(\"\":\"=A\" (n):\"a\" (__low),\"d\" (__high));			\\
      __mod;								\\
    })" 1346 . 1849)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("geekos/kassert.h" include (:system-flag t) nil [249 276])
            ("geekos/defs.h" include (:system-flag t) nil [277 301])
            ("geekos/idt.h" include (:system-flag t) nil [302 325])
            ("geekos/serial.h" include (:system-flag t) nil [326 352])
            ("geekos/debug.h" include (:system-flag t) nil [353 378])
            ("s_IDT" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("IDT_Descriptor" type (:type "union") nil nil))
                nil [581 634])
            ("g_entryPointTableStart" variable
               (:typemodifiers ("extern")
                :type "char")
                nil [933 990])
            ("g_entryPointTableEnd" variable
               (:typemodifiers ("extern")
                :type "char")
                nil [933 990])
            ("g_handlerSizeNoErr" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [991 1039])
            ("g_handlerSizeErr" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [991 1039])
            ("g_interruptTable" variable
               (:dereference 1
                :type ("Interrupt_Handler" type (:type "class") nil nil))
                nil [1199 1253])
            ("DumpIDT" function (:type "void") nil [1257 1838])
            ("SerialDumpIDT" function (:type "void") nil [1841 2462])
            ("Init_IDT" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2847 2852]))                  
                :type "void")
                nil [2833 4122])
            ("Init_Interrupt_Gate" function
               (:arguments 
                  ( ("desc" variable
                       (:pointer 1
                        :type ("IDT_Descriptor" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4250 4277])
                    ("addr" variable (:type ("ulong_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4278 4291])
                    ("dpl" variable (:type "int") (reparse-symbol arg-sub-list) [4293 4301]))                  
                :type "void")
                nil [4225 4553])
            ("Install_Interrupt_Handler" function
               (:arguments 
                  ( ("interrupt" variable (:type "int") (reparse-symbol arg-sub-list) [4824 4838])
                    ("handler" variable (:type ("Interrupt_Handler" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4839 4865]))                  
                :type "void")
                nil [4793 4972]))          
      :file "idt.c"
      :pointmax 4973
      :fsize 4972
      :lastmodtime '(23849 13902 681288 933000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("geekos/idt.h" include (:system-flag t) nil [278 301])
            ("geekos/screen.h" include (:system-flag t) nil [341 367])
            ("geekos/kassert.h" include (:system-flag t) nil [368 395])
            ("geekos/int.h" include (:system-flag t) nil [396 419])
            ("geekos/serial.h" include (:system-flag t) nil [420 446])
            ("geekos/debug.h" include (:system-flag t) nil [447 472])
            ("geekos/cpu.h" include (:system-flag t) nil [474 497])
            ("Get_Current_EFLAGS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [561 566]))                  
                :type ("ulong_t" type (:type "class") nil nil))
                nil [534 567])
            ("exception_names" variable
               (:pointer 1
                :dereference 1
                :default-value "{
  \"#DE (Divide Error)\",
  \"#DB (Reserved)\",
  \"NMI\",
  \"#BP (Breakpoint)\",
  \"#OF (Overflow)\",
  \"#BR (BOUND Range Exceeded)\",
  \"#UD (Invalid Opcode)\",
  \"#NM (No Math Coprocessor)\",
  \"#DF (Double Fault)\",
  \"Coprocessor Segment Overrun\",
  \"#TS (Invalid TSS)\",
  \"#NP (Segment Not Present)\",
  \"#SS (Stack Segment Fault)\",
  \"#GP (General Protection Fault)\",
  \"#PF (Page Fault)\",
  \"(Reserved - 15)\",
  \"#MF (Math Fault x87)\",
  \"#AC (Alignment Check)\",
  \"#MC (Machine Check)\",
  \"#XF (SIMD FP Exception)\",
  \"(Reserved - 20)\",
  \"(Reserved - 21)\",
  \"(Reserved - 22)\",
  \"(Reserved - 23)\",
  \"(Reserved - 24)\",
  \"(Reserved - 25)\",
  \"(Reserved - 26)\",
  \"(Reserved - 27)\",
  \"(Reserved - 28)\",
  \"(Reserved - 29)\",
  \"(Reserved - 30)\",
  \"(Reserved - 31)\",
  \"USER 32\",
  \"USER 33\",
  \"USER 34\",
  \"USER 35\",
  \"USER 36\",
  \"USER 37\",
  \"USER 38\",
  \"USER 39\",
  \"USER 40\",
  \"USER 41\",
  \"USER 42\",
  \"USER 43\",
  \"USER 44\",
  \"USER 45\",
  \"USER 46\",
  \"USER 47\",
  \"USER 48\",
  \"USER 49\",
  \"USER 50\",
  \"USER 51\",
  \"USER 52\",
  \"USER 53\",
  \"USER 54\",
  \"USER 55\",
  \"USER 56\",
  \"USER 57\",
  \"USER 58\",
  \"USER 59\",
  \"USER 60\",
  \"USER 61\",
  \"USER 62\",
  \"USER 63\",
  \"USER 64\",
  \"USER 65\",
  \"USER 66\",
  \"USER 67\",
  \"USER 68\",
  \"USER 69\",
  \"USER 70\",
  \"USER 71\",
  \"USER 72\",
  \"USER 73\",
  \"USER 74\",
  \"USER 75\",
  \"USER 76\",
  \"USER 77\",
  \"USER 78\",
  \"USER 79\",
  \"USER 80\",
  \"USER 81\",
  \"USER 82\",
  \"USER 83\",
  \"USER 84\",
  \"USER 85\",
  \"USER 86\",
  \"USER 87\",
  \"USER 88\",
  \"USER 89\",
  \"USER 90\",
  \"USER 91\",
  \"USER 92\",
  \"USER 93\",
  \"USER 94\",
  \"USER 95\",
  \"USER 96\",
  \"USER 97\",
  \"USER 98\",
  \"USER 99\",
  \"USER 100\",
  \"USER 101\",
  \"USER 102\",
  \"USER 103\",
  \"USER 104\",
  \"USER 105\",
  \"USER 106\",
  \"USER 107\",
  \"USER 108\",
  \"USER 109\",
  \"USER 110\",
  \"USER 111\",
  \"USER 112\",
  \"USER 113\",
  \"USER 114\",
  \"USER 115\",
  \"USER 116\",
  \"USER 117\",
  \"USER 118\",
  \"USER 119\",
  \"USER 120\",
  \"USER 121\",
  \"USER 122\",
  \"USER 123\",
  \"USER 124\",
  \"USER 125\",
  \"USER 126\",
  \"USER 127\",
  \"USER 128\",
  \"USER 129\",
  \"USER 130\",
  \"USER 131\",
  \"USER 132\",
  \"USER 133\",
  \"USER 134\",
  \"USER 135\",
  \"USER 136\",
  \"USER 137\",
  \"USER 138\",
  \"USER 139\",
  \"USER 140\",
  \"USER 141\",
  \"USER 142\",
  \"USER 143\",
  \"USER 144\",
  \"USER 145\",
  \"USER 146\",
  \"USER 147\",
  \"USER 148\",
  \"USER 149\",
  \"USER 150\",
  \"USER 151\",
  \"USER 152\",
  \"USER 153\",
  \"USER 154\",
  \"USER 155\",
  \"USER 156\",
  \"USER 157\",
  \"USER 158\",
  \"USER 159\",
  \"USER 160\",
  \"USER 161\",
  \"USER 162\",
  \"USER 163\",
  \"USER 164\",
  \"USER 165\",
  \"USER 166\",
  \"USER 167\",
  \"USER 168\",
  \"USER 169\",
  \"USER 170\",
  \"USER 171\",
  \"USER 172\",
  \"USER 173\",
  \"USER 174\",
  \"USER 175\",
  \"USER 176\",
  \"USER 177\",
  \"USER 178\",
  \"USER 179\",
  \"USER 180\",
  \"USER 181\",
  \"USER 182\",
  \"USER 183\",
  \"USER 184\",
  \"USER 185\",
  \"USER 186\",
  \"USER 187\",
  \"USER 188\",
  \"USER 189\",
  \"USER 190\",
  \"USER 191\",
  \"USER 192\",
  \"USER 193\",
  \"USER 194\",
  \"USER 195\",
  \"USER 196\",
  \"USER 197\",
  \"USER 198\",
  \"USER 199\",
  \"USER 200\",
  \"USER 201\",
  \"USER 202\",
  \"USER 203\",
  \"USER 204\",
  \"USER 205\",
  \"USER 206\",
  \"USER 207\",
  \"USER 208\",
  \"USER 209\",
  \"USER 210\",
  \"USER 211\",
  \"USER 212\",
  \"USER 213\",
  \"USER 214\",
  \"USER 215\",
  \"USER 216\",
  \"USER 217\",
  \"USER 218\",
  \"USER 219\",
  \"USER 220\",
  \"USER 221\",
  \"USER 222\",
  \"USER 223\",
  \"USER 224\",
  \"USER 225\",
  \"USER 226\",
  \"USER 227\",
  \"USER 228\",
  \"USER 229\",
  \"USER 230\",
  \"USER 231\",
  \"USER 232\",
  \"USER 233\",
  \"USER 234\",
  \"USER 235\",
  \"USER 236\",
  \"USER 237\",
  \"USER 238\",
  \"USER 239\",
  \"USER 240\",
  \"USER 241\",
  \"USER 242\",
  \"USER 243\",
  \"USER 244\",
  \"USER 245\",
  \"USER 246\",
  \"USER 247\",
  \"USER 248\",
  \"USER 249\",
  \"USER 250\",
  \"USER 251\",
  \"USER 252\",
  \"USER 253\",
  \"USER 254\",
  \"USER 255\",
}"
                :type "char")
                nil [762 4624])
            ("exception_type_names" variable
               (:pointer 1
                :dereference 1
                :default-value "{
  \"External Interrupt\",
  \"NOT USED\",
  \"NMI\",
  \"Hardware Exception\",
  \"NOT USED\",
  \"NOT USED\",
  \"Software Exception\",
  \"NOT USED\"
}"
                :type "char")
                nil [4628 4799])
            ("Dummy_Interrupt_Handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4964 4994]))                  
                :type "void")
                nil [4928 5531])
            ("SerialPrint_Selector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("regName" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [5741 5761])
                    ("value" variable (:type ("uint_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5762 5775]))                  
                :type "void")
                nil [5708 5880])
            ("Init_Interrupts" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6118 6123]))                  
                :type "void")
                nil [6097 6642])
            ("Interrupts_Enabled" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6733 6738]))                  
                :type "bool")
                nil [6709 6823])
            ("Dump_Interrupt_State" function
               (:arguments 
                  ( ("state" variable
                       (:pointer 1
                        :type ("Interrupt_State" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6899 6929]))                  
                :type "void")
                nil [6873 7876]))          
      :file "int.c"
      :pointmax 7878
      :fsize 7877
      :lastmodtime '(23849 13902 684288 933000)
      :unmatched-syntax nil))
  :file "!home!nmg!Code!C!leviathan!palacios!geekos!src!geekos!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
