;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("$(TOP)/config.mak" include nil nil [152 178])
            ("LIBTCC" variable (:default-value ("libtcc.a")) nil [287 305])
            ("LIBTCC1" variable (:default-value ("libtcc1.a")) nil [305 325])
            ("LINK_LIBTCC" variable nil nil [325 339])
            ("LIBS" variable nil nil [339 346])
            ("CFLAGS" variable (:default-value ("-I$(TOP)")) nil [346 365])
            ("CFLAGS" variable (:default-value ("$(CPPFLAGS)")) nil [365 387])
            ("VPATH" variable (:default-value ("$(TOPSRC)")) nil [387 405])
            ("TCCFLAGS-unx" variable (:default-value ("-B$(TOP)" "-I$(TOPSRC)/include" "-I$(TOPSRC)" "-I$(TOP)")) nil [1136 1201])
            ("TCCFLAGS-win" variable (:default-value ("-B$(TOPSRC)/win32" "-I$(TOPSRC)/include" "-I$(TOPSRC)" "-I$(TOP)" "-L$(TOP)")) nil [1201 1284])
            ("TCCFLAGS" variable (:default-value ("$(TCCFLAGS$(CFGWIN))")) nil [1284 1316])
            ("TCC" variable (:default-value ("$(TOP)/tcc$(EXESUF)" "$(TCCFLAGS)")) nil [1316 1354])
            ("CFLAGS_P" variable (:default-value ("$(CFLAGS)" "-pg" "-static" "-DCONFIG_TCC_STATIC" "-DTCC_PROFILE")) nil [1406 1473])
            ("LIBS_P" variable (:default-value ("$(LIBS)")) nil [1473 1490])
            ("LDFLAGS_P" variable (:default-value ("$(LDFLAGS)")) nil [1490 1513])
            ("NATIVE_DEFINES" variable (:default-value ("$(NATIVE_DEFINES_yes)")) nil [2218 2258])
            ("PROGS" variable (:default-value ("tcc$(EXESUF)")) nil [2382 2403])
            ("TCCLIBS" variable (:default-value ("$(LIBTCC1)" "$(LIBTCC)" "$(LIBTCCDEF)")) nil [2403 2447])
            ("TCCDOCS" variable (:default-value ("tcc.1" "tcc-doc.html" "tcc-doc.info")) nil [2447 2489])
            ("all" function (:arguments ("$(PROGS)" "$(TCCLIBS)" "$(TCCDOCS)")) nil [2490 2526])
            ("TCC_X" variable (:default-value ("i386" "x86_64" "i386-win32" "x86_64-win32" "x86_64-osx" "arm" "arm64" "arm-wince" "c67")) nil [2561 2640])
            ("LIBTCC1_X" variable (:default-value ("i386" "x86_64" "i386-win32" "x86_64-win32" "x86_64-osx" "arm" "arm64" "arm-wince")) nil [2723 2802])
            ("PROGS_CROSS" variable (:default-value ("$(foreach X,$(TCC_X),$X-tcc$(EXESUF))")) nil [2803 2855])
            ("LIBTCC1_CROSS" variable (:default-value ("$(foreach X,$(LIBTCC1_X),$X-libtcc1.a)")) nil [2855 2910])
            ("cross" function (:arguments ("$(LIBTCC1_CROSS)" "$(PROGS_CROSS)")) nil [2942 2981])
            ("cross-%" function (:arguments ("%-tcc$(EXESUF)" "%-libtcc1.a" ";")) nil [3020 3058])
            ("install" function (:arguments (";" "@$(MAKE)" "--no-print-directory" "install$(CFGWIN)")) nil [3059 3117])
            ("install-strip" function (:arguments (";" "@$(MAKE)" "--no-print-directory" "install$(CFGWIN)" "CONFIG_strip=yes")) nil [3117 3198])
            ("uninstall" function (:arguments (";" "@$(MAKE)" "--no-print-directory" "uninstall$(CFGWIN)")) nil [3198 3260])
            ("all" function (:arguments ("cross")) nil [3280 3292])
            ("T" variable (:default-value ("$(or $(CROSS_TARGET),$(NATIVE_TARGET),unknown)")) nil [3347 3398])
            ("X" variable (:default-value ("$(if $(CROSS_TARGET),$(CROSS_TARGET)-)")) nil [3398 3441])
            ("DEF-i386" variable (:default-value ("-DTCC_TARGET_I386")) nil [3442 3478])
            ("DEF-x86_64" variable (:default-value ("-DTCC_TARGET_X86_64")) nil [3478 3516])
            ("DEF-i386-win32" variable (:default-value ("-DTCC_TARGET_PE" "-DTCC_TARGET_I386")) nil [3516 3568])
            ("DEF-x86_64-win32" variable (:default-value ("-DTCC_TARGET_PE" "-DTCC_TARGET_X86_64")) nil [3568 3622])
            ("DEF-x86_64-osx" variable (:default-value ("-DTCC_TARGET_MACHO" "-DTCC_TARGET_X86_64")) nil [3622 3679])
            ("DEF-arm-wince" variable (:default-value ("-DTCC_TARGET_PE" "-DTCC_TARGET_ARM" "-DTCC_ARM_EABI" "-DTCC_ARM_VFP" "-DTCC_ARM_HARDFLOAT")) nil [3679 3779])
            ("DEF-arm64" variable (:default-value ("-DTCC_TARGET_ARM64")) nil [3779 3816])
            ("DEF-c67" variable (:default-value ("-DTCC_TARGET_C67" "-w")) nil [3816 3872])
            ("DEF-arm-fpa" variable (:default-value ("-DTCC_TARGET_ARM")) nil [3872 3907])
            ("DEF-arm-fpa-ld" variable (:default-value ("-DTCC_TARGET_ARM" "-DLDOUBLE_SIZE=12")) nil [3907 3960])
            ("DEF-arm-vfp" variable (:default-value ("-DTCC_TARGET_ARM" "-DTCC_ARM_VFP")) nil [3960 4009])
            ("DEF-arm-eabi" variable (:default-value ("-DTCC_TARGET_ARM" "-DTCC_ARM_VFP" "-DTCC_ARM_EABI")) nil [4009 4073])
            ("DEF-arm-eabihf" variable (:default-value ("-DTCC_TARGET_ARM" "-DTCC_ARM_VFP" "-DTCC_ARM_EABI" "-DTCC_ARM_HARDFLOAT")) nil [4073 4157])
            ("DEF-arm" variable (:default-value ("$(DEF-arm-eabihf)")) nil [4157 4193])
            ("DEFINES" variable (:default-value ("$(DEF-$T)" "$(DEF-all)")) nil [4235 4267])
            ("DEFINES" variable (:default-value ("$(if $(ROOT-$T),-DCONFIG_SYSROOT=\"\\\"$(ROOT-$T)\\\"\")")) nil [4267 4329])
            ("DEFINES" variable (:default-value ("$(if $(CRT-$T),-DCONFIG_TCC_CRTPREFIX=\"\\\"$(CRT-$T)\\\"\")")) nil [4329 4395])
            ("DEFINES" variable (:default-value ("$(if $(LIB-$T),-DCONFIG_TCC_LIBPATHS=\"\\\"$(LIB-$T)\\\"\")")) nil [4395 4460])
            ("DEFINES" variable (:default-value ("$(if $(INC-$T),-DCONFIG_TCC_SYSINCLUDEPATHS=\"\\\"$(INC-$T)\\\"\")")) nil [4460 4532])
            ("DEFINES" variable (:default-value ("$(DEF-$(or $(findstring win,$T),unx))")) nil [4532 4581])
            ("DEF-win" variable (:default-value ("-DTCC_LIBTCC1=\"\\\"$(X)libtcc1.a\\\"\"")) nil [4623 4668])
            ("DEF-unx" variable (:default-value ("-DTCC_LIBTCC1=\"\\\"lib/$(X)libtcc1.a\\\"\"")) nil [4668 4717])
            ("DEF-all" variable (:default-value ("-DTCC_LIBTCC1=\"\\\"$(X)libtcc1.a\\\"\"")) nil [4722 4767])
            ("DEF-win" variable (:default-value ("-DCONFIG_TCCDIR=\"\\\"$(tccdir)/win32\\\"\"")) nil [4767 4816])
            ("CORE_FILES" variable (:default-value ("tcc.c" "tcctools.c" "libtcc.c" "tccpp.c" "tccgen.c" "tccelf.c" "tccasm.c" "tccrun.c")) nil [4903 4986])
            ("CORE_FILES" variable (:default-value ("tcc.h" "config.h" "libtcc.h" "tcctok.h")) nil [4986 5033])
            ("i386_FILES" variable (:default-value ("$(CORE_FILES)" "i386-gen.c" "i386-link.c" "i386-asm.c" "i386-asm.h" "i386-tok.h")) nil [5033 5116])
            ("i386-win32_FILES" variable (:default-value ("$(i386_FILES)" "tccpe.c")) nil [5116 5157])
            ("x86_64_FILES" variable (:default-value ("$(CORE_FILES)" "x86_64-gen.c" "x86_64-link.c" "i386-asm.c" "x86_64-asm.h")) nil [5157 5237])
            ("x86_64-win32_FILES" variable (:default-value ("$(x86_64_FILES)" "tccpe.c")) nil [5237 5282])
            ("x86_64-osx_FILES" variable (:default-value ("$(x86_64_FILES)")) nil [5282 5317])
            ("arm_FILES" variable (:default-value ("$(CORE_FILES)" "arm-gen.c" "arm-link.c" "arm-asm.c")) nil [5317 5374])
            ("arm-wince_FILES" variable (:default-value ("$(arm_FILES)" "tccpe.c")) nil [5374 5413])
            ("arm64_FILES" variable (:default-value ("$(CORE_FILES)" "arm64-gen.c" "arm64-link.c")) nil [5413 5466])
            ("c67_FILES" variable (:default-value ("$(CORE_FILES)" "c67-gen.c" "c67-link.c" "tcccoff.c")) nil [5466 5523])
            ("LIBTCC_SRC" variable (:default-value ("$(filter-out tcc.c tcctools.c,$(filter %.c,$($T_FILES)))")) nil [5541 5611])
            ("LIBTCC_OBJ" variable (:default-value ("$(X)libtcc.o")) nil [5637 5663])
            ("LIBTCC_INC" variable (:default-value ("$($T_FILES)")) nil [5663 5688])
            ("TCC_FILES" variable (:default-value ("$(X)tcc.o")) nil [5688 5710])
            ("tcc.o" function (:arguments ("DEFINES" "+=" "-DONE_SOURCE=0")) nil [5710 5744])
            ("LIBTCC_OBJ" variable (:default-value ("$(patsubst %.c,$(X)%.o,$(LIBTCC_SRC))")) nil [5749 5800])
            ("LIBTCC_INC" variable (:default-value ("$(filter %.h %-gen.c %-link.c,$($T_FILES))")) nil [5800 5856])
            ("TCC_FILES" variable (:default-value ("$(X)tcc.o" "$(LIBTCC_OBJ)")) nil [5856 5892])
            ("$(TCC_FILES)" function (:arguments ("DEFINES" "+=" "-DONE_SOURCE=0")) nil [5892 5933])
            ("$(X)" function (:arguments ("%.c" "$(LIBTCC_INC)")) nil [5970 6038])
            ("$(X)" function (:arguments ("tcctools.c")) nil [6065 6088])
            ("tcc" function (:arguments ("tcc.o" "$(LIBTCC)")) nil [6112 6192])
            ("%-tcc" function (:arguments ("FORCE")) nil [6218 6325])
            ("$(CROSS_TARGET)" function (:arguments ("$(TCC_FILES)")) nil [6326 6404])
            ("tcc_p" function (:arguments ("$($T_FILES)")) nil [6425 6515])
            ("libtcc.a" function (:arguments ("$(LIBTCC_OBJ)")) nil [6540 6581])
            ("libtcc.so" function (:arguments ("$(LIBTCC_OBJ)")) nil [6607 6682])
            ("libtcc.so" function (:arguments ("CFLAGS+=-fPIC")) nil [6683 6708])
            ("libtcc.so" function (:arguments ("LDFLAGS+=-fPIC")) nil [6708 6734])
            ("libtcc.dll" function (:arguments ("$(LIBTCC_OBJ)")) nil [6768 6830])
            ("libtcc.dll" function (:arguments ("DEFINES" "+=" "-DLIBTCC_AS_DLL")) nil [6830 6870])
            ("libtcc.def" function (:arguments ("libtcc.dll" "tcc$(EXESUF)")) nil [6908 6971])
            ("libtcc1.a" function (:arguments ("tcc$(EXESUF)" "FORCE")) nil [7022 7090])
            ("%-libtcc1.a" function (:arguments ("%-tcc$(EXESUF)" "FORCE")) nil [7109 7197])
            (".PRECIOUS" function (:arguments ("%-libtcc1.a")) nil [7198 7221])
            ("FORCE" function nil nil [7221 7228])
            ("tcc-doc.html" function (:arguments ("tcc-doc.texi")) nil [7335 7425])
            ("tcc.1" function (:arguments ("tcc-doc.texi")) nil [7426 7604])
            ("tcc-doc.info" function (:arguments ("tcc-doc.texi")) nil [7605 7653])
            ("INSTALL" variable (:default-value ("install" "-m644")) nil [7742 7766])
            ("INSTALLBIN" variable (:default-value ("install" "-m755" "$(STRIP_$(CONFIG_strip))")) nil [7766 7818])
            ("STRIP_yes" variable (:default-value ("-s")) nil [7818 7833])
            ("LIBTCC1_W" variable (:default-value ("$(filter %-win32-libtcc1.a %-wince-libtcc1.a,$(LIBTCC1_CROSS))")) nil [7834 7909])
            ("LIBTCC1_U" variable (:default-value ("$(filter-out $(LIBTCC1_W),$(LIBTCC1_CROSS))")) nil [7909 7965])
            ("IB" variable (:default-value ("$(if $1,mkdir -p $2 && $(INSTALLBIN) $1 $2)")) nil [7965 8014])
            ("IBw" variable (:default-value ("$(call IB,$(wildcard $1),$2)")) nil [8014 8049])
            ("IF" variable (:default-value ("$(if $1,mkdir -p $2 && $(INSTALL) $1 $2)")) nil [8049 8095])
            ("IFw" variable (:default-value ("$(call IF,$(wildcard $1),$2)")) nil [8095 8130])
            ("IR" variable (:default-value ("mkdir" "-p" "$2" "&&" "cp" "-r" "$1/." "$2")) nil [8130 8164])
            ("install-unx" function nil nil [8188 8605])
            ("uninstall-unx" function nil nil [8875 9139])
            ("install-win" function nil nil [9174 9762])
            ("install-win" function (:arguments ("INSTALL" "=" "cp")) nil [10089 10116])
            ("install-win" function (:arguments ("INSTALLBIN" "=" "cp")) nil [10116 10146])
            ("uninstall-win" function nil nil [10176 10412])
            ("TAGFILES" variable (:default-value ("*.[ch]" "include/*.h" "lib/*.[chS]")) nil [10505 10547])
            ("tags" function (:arguments (";" "ctags" "$(TAGFILES)")) nil [10547 10574])
            ("ETAGS" function (:arguments (";" "etags" "$(TAGFILES)")) nil [10618 10646])
            ("TCC-VERSION" variable (:default-value ("tcc-$(VERSION)")) nil [10758 10787])
            ("tar" function (:arguments ("tcc-doc.html")) nil [10787 11128])
            ("config.mak" function nil nil [11129 11206])
            ("test" function nil nil [11223 11247])
            ("tests2.%" function nil nil [11296 11334])
            ("clean" function nil nil [11335 11516])
            ("distclean" function (:arguments ("clean")) nil [11517 11605])
            (".PHONY" function (:arguments ("all" "clean" "test" "tar" "tags" "ETAGS" "distclean" "install" "uninstall" "FORCE")) nil [11606 11678])
            ("help" function nil nil [11679 13074]))          
      :file "Makefile"
      :pointmax 13177
      :fsize 13176
      :lastmodtime '(23094 10841 0 0)
      :unmatched-syntax '((ENDIF 13152 . 13157) (bol 13152 . 13152) (string 10084 . 10088) (string 10009 . 10083) (IFEQ 10004 . 10008) (bol 10004 . 10004) (shell-command 9841 . 9916) (bol 9840 . 9840) (shell-command 9799 . 9839) (bol 9798 . 9798) (string 9795 . 9797) (string 9768 . 9794) (IFNEQ 9762 . 9767) (bol 9762 . 9762) (shell-command 8778 . 8855) (bol 8777 . 8777) (shell-command 8716 . 8776) (bol 8715 . 8715) (shell-command 8642 . 8714) (bol 8641 . 8641) (string 8638 . 8640) (string 8611 . 8637) (IFNEQ 8605 . 8610) (bol 8605 . 8605) (semantic-list 6985 . 6993) (punctuation 6984 . 6985) (symbol 6979 . 6984) (punctuation 6977 . 6978) (punctuation 6976 . 6977) (symbol 6971 . 6975) (bol 6971 . 6971) (symbol 4885 . 4901) (symbol 4876 . 4884) (bol 4876 . 4876) (semantic-list 4217 . 4233) (punctuation 4216 . 4217) (punctuation 4214 . 4215) (semantic-list 4198 . 4213) (punctuation 4197 . 4198) (symbol 4193 . 4197) (bol 4193 . 4193) (symbol 2199 . 2217) (punctuation 2197 . 2198) (punctuation 2196 . 2197) (semantic-list 2181 . 2195) (punctuation 2180 . 2181) (symbol 2165 . 2180) (bol 2165 . 2165) (symbol 2151 . 2164) (punctuation 2149 . 2150) (punctuation 2148 . 2149) (semantic-list 2131 . 2147) (punctuation 2130 . 2131) (symbol 2115 . 2130) (bol 2115 . 2115) (symbol 2100 . 2114) (punctuation 2098 . 2099) (punctuation 2097 . 2098) (semantic-list 2079 . 2096) (punctuation 2078 . 2079) (symbol 2063 . 2078) (bol 2063 . 2063) (symbol 2043 . 2062) (symbol 2028 . 2042) (punctuation 2026 . 2027) (punctuation 2025 . 2026) (semantic-list 2005 . 2024) (punctuation 2004 . 2005) (symbol 1989 . 2004) (bol 1989 . 1989) (symbol 1972 . 1988) (punctuation 1970 . 1971) (punctuation 1969 . 1970) (semantic-list 1956 . 1968) (punctuation 1955 . 1956) (symbol 1940 . 1955) (bol 1940 . 1940) (symbol 1925 . 1939) (punctuation 1923 . 1924) (punctuation 1922 . 1923) (semantic-list 1905 . 1921) (punctuation 1904 . 1905) (symbol 1889 . 1904) (bol 1889 . 1889) (symbol 1869 . 1888) (punctuation 1867 . 1868) (punctuation 1866 . 1867) (semantic-list 1850 . 1865) (punctuation 1849 . 1850) (symbol 1834 . 1849) (bol 1834 . 1834) (symbol 1823 . 1833) (punctuation 1821 . 1822) (punctuation 1820 . 1821) (semantic-list 1806 . 1819) (punctuation 1805 . 1806) (symbol 1790 . 1805) (bol 1790 . 1790) (symbol 1777 . 1789) (punctuation 1775 . 1776) (punctuation 1774 . 1775) (semantic-list 1758 . 1773) (punctuation 1757 . 1758) (symbol 1742 . 1757) (bol 1742 . 1742) (symbol 1723 . 1741) (punctuation 1721 . 1722) (punctuation 1720 . 1721) (semantic-list 1707 . 1719) (punctuation 1706 . 1707) (symbol 1691 . 1706) (bol 1691 . 1691) (symbol 1675 . 1690) (punctuation 1673 . 1674) (punctuation 1672 . 1673) (semantic-list 1657 . 1671) (punctuation 1656 . 1657) (symbol 1641 . 1656) (bol 1641 . 1641) (symbol 1621 . 1640) (punctuation 1619 . 1620) (punctuation 1618 . 1619) (semantic-list 1602 . 1617) (punctuation 1601 . 1602) (symbol 1586 . 1601) (bol 1586 . 1586) (symbol 1568 . 1585) (punctuation 1566 . 1567) (punctuation 1565 . 1566) (semantic-list 1551 . 1564) (punctuation 1550 . 1551) (symbol 1535 . 1550) (bol 1535 . 1535) (symbol 1531 . 1534) (punctuation 1529 . 1530) (semantic-list 1522 . 1528) (punctuation 1521 . 1522) (symbol 1514 . 1521) (bol 1514 . 1514) (symbol 1384 . 1398) (punctuation 1382 . 1383) (punctuation 1381 . 1382) (symbol 1372 . 1380) (bol 1371 . 1371) (ENDIF 1062 . 1067) (bol 1061 . 1061) (symbol 1056 . 1060) (punctuation 1054 . 1055) (punctuation 1053 . 1054) (symbol 1028 . 1052) (symbol 1021 . 1027) (bol 1019 . 1019) (symbol 1011 . 1018) (symbol 1000 . 1010) (symbol 984 . 999) (punctuation 982 . 983) (punctuation 981 . 982) (symbol 973 . 980) (bol 971 . 971) (symbol 966 . 970) (semantic-list 960 . 966) (punctuation 959 . 960) (punctuation 957 . 958) (symbol 943 . 956) (bol 941 . 941) (symbol 930 . 940) (IFDEF 924 . 929) (bol 923 . 923) (semantic-list 916 . 922) (punctuation 915 . 916) (punctuation 913 . 914) (symbol 899 . 912) (bol 898 . 898) (symbol 893 . 897) (punctuation 892 . 893) (symbol 885 . 891) (bol 884 . 884) (ENDIF 878 . 883) (bol 877 . 877) (ENDIF 871 . 876) (bol 869 . 869) (string 857 . 868) (punctuation 856 . 857) (symbol 850 . 856) (punctuation 849 . 850) (symbol 846 . 849) (punctuation 844 . 845) (punctuation 843 . 844) (symbol 831 . 842) (bol 828 . 828) (semantic-list 807 . 827) (IFNEQ 801 . 806) (bol 799 . 799) (semantic-list 793 . 798) (punctuation 792 . 793) (symbol 791 . 792) (semantic-list 783 . 791) (punctuation 782 . 783) (punctuation 780 . 781) (punctuation 779 . 780) (symbol 763 . 778) (symbol 756 . 762) (bol 754 . 754) (semantic-list 745 . 753) (punctuation 744 . 745) (symbol 738 . 744) (punctuation 737 . 738) (symbol 731 . 737) (bol 729 . 729) (semantic-list 707 . 728) (IFEQ 702 . 706) (bol 701 . 701) (bol 656 . 656) (ENDIF 650 . 655) (bol 649 . 649) (symbol 644 . 648) (punctuation 643 . 644) (punctuation 642 . 643) (symbol 638 . 642) (bol 636 . 636) (semantic-list 617 . 635) (IFNEQ 611 . 616) (bol 610 . 610) (symbol 606 . 609) (punctuation 605 . 606) (symbol 601 . 605) (bol 600 . 600) (semantic-list 558 . 594) (punctuation 557 . 558) (symbol 553 . 557) (semantic-list 547 . 553) (punctuation 546 . 547) (punctuation 544 . 545) (symbol 530 . 543) (bol 529 . 529) (symbol 524 . 528) (punctuation 522 . 523) (symbol 515 . 521) (bol 514 . 514) (ENDIF 508 . 513) (bol 507 . 507) (symbol 496 . 506) (punctuation 494 . 495) (symbol 484 . 493) (bol 482 . 482) (semantic-list 473 . 481) (punctuation 472 . 473) (symbol 466 . 472) (punctuation 464 . 465) (symbol 457 . 463) (bol 455 . 455) (semantic-list 432 . 454) (IFNEQ 426 . 431) (bol 425 . 425) (symbol 278 . 279) (punctuation 277 . 278) (symbol 260 . 277) (punctuation 258 . 259) (punctuation 257 . 258) (symbol 250 . 256) (bol 249 . 249) (symbol 142 . 144) (punctuation 140 . 141) (symbol 131 . 139) (bol 130 . 130) (symbol 128 . 129) (punctuation 126 . 127) (symbol 122 . 125) (bol 121 . 121))))
  :file "!home!nmg!Downloads!tcc-0.9.27!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
