;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Let's play the tic-tac-toe game!

@author: milos
\"\"\"" code nil nil [1 57])
            ("tictactoe" include nil nil [58 89])
            ("player" include nil nil [90 115])
            ("heuristics" include nil nil [116 149])
            ("naive_heuristics" include nil nil [150 194])
            ("myh_new" include nil nil [195 231])
            ("basic_h" variable nil nil [253 275])
            ("naive_h" variable nil nil [276 303])
            ("my_h_new" variable nil nil [304 335])
            ("playerA" variable nil nil [353 394])
            ("playerB" variable nil nil [395 435])
            ("stats" variable nil nil [436 495])
            ("board_size" variable nil nil [530 543])
            ("k" variable nil nil [581 584])
            ("print" code nil nil [585 618])
            ("playerA" code nil nil [619 639])
            ("playerB" code nil nil [640 660])
            ("for" code nil nil [755 1353])
            ("for" code nil nil [1354 1952]))          
      :file "main.py"
      :pointmax 1952
      :fsize 1961
      :lastmodtime '(23955 47624 669856 419000)
      :unmatched-syntax '(($EOI 1952 . 1952)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tic-tac-toe on kxk board (default)
@author: milos
\"\"\"" code nil nil [1 58])
            ("TicTacToe" type
               (:documentation "
    This is playing TicTacToe game.

    Player X makes the first move.
    Note: you do NOT have to modify this class.
    "
                :members 
                  ( ("WINS" variable nil (reparse-symbol indented_block_body) [218 246])
                    ("TIED" variable nil (reparse-symbol indented_block_body) [251 272])
                    ("MIN_NUM" variable nil (reparse-symbol indented_block_body) [277 288])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialization of one game.

        :param board_size: k*k
        :param playerX: makes the first move
        :param playerO: makes the second move
        :param print_steps: if True, print the intermediate steps
        \"\"\"" code nil (reparse-symbol indented_block_body) [365 605])
                            ("if" code nil (reparse-symbol indented_block_body) [614 736])
                            ("self" variable nil (reparse-symbol indented_block_body) [744 772])
                            ("self" variable nil (reparse-symbol indented_block_body) [781 851])
                            ("self" variable nil (reparse-symbol indented_block_body) [860 878])
                            ("self" variable nil (reparse-symbol indented_block_body) [887 925])
                            ("self" variable nil (reparse-symbol indented_block_body) [934 972])
                            ("self" variable nil (reparse-symbol indented_block_body) [981 1011]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [307 311])
                            ("board_size" variable nil (reparse-symbol function_parameters) [313 323])
                            ("playerX" variable nil (reparse-symbol function_parameters) [325 332])
                            ("playerO" variable nil (reparse-symbol function_parameters) [334 341])
                            ("print_steps" variable nil (reparse-symbol function_parameters) [343 354]))                          
                        :documentation "
        Initialization of one game.

        :param board_size: k*k
        :param playerX: makes the first move
        :param playerO: makes the second move
        :param print_steps: if True, print the intermediate steps
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [294 1012])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1027 1031]))                          
                        :documentation "
        Reset the game. All cells are empty, marked as '_'.
        ")
                        (reparse-symbol indented_block_body) [1017 1259])
                    ("set_players" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1280 1284])
                            ("playerX" variable nil (reparse-symbol function_parameters) [1286 1293])
                            ("playerO" variable nil (reparse-symbol function_parameters) [1295 1302]))                          
                        :documentation "
        Set the two players. X moves the first.
        ")
                        (reparse-symbol indented_block_body) [1264 1471])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1486 1490]))                          
                        :documentation "
        Starts to play the game.

        :return: the end result
        ")
                        (reparse-symbol indented_block_body) [1476 3016])
                    ("print_board" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3037 3041]))                          )
                        (reparse-symbol indented_block_body) [3021 3160])
                    ("check_end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3179 3183])
                            ("i" variable nil (reparse-symbol function_parameters) [3185 3186])
                            ("j" variable nil (reparse-symbol function_parameters) [3188 3189]))                          
                        :documentation "
        Check if the games ends after board[i][j] is filled.
        ")
                        (reparse-symbol indented_block_body) [3165 4889]))                  
                :type "class")
                nil [61 4889]))          
      :file "tictactoe.py"
      :pointmax 4889
      :fsize 4888
      :lastmodtime '(23955 47826 875852 856000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "player.py"
      :fsize 2733
      :lastmodtime '(23931 56958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tic-tac-toe heuristic

Estimates the value of the board
It checks rows, columns and diagonals for local patterns corresponding 
to different configurations of X, O and _

@author: milos
\"\"\"" code nil nil [1 194])
            ("Heuristics" type
               (:documentation "
    This is an example of a basic heuristic class.

    Feel free to modify or extend this class. The minimum
    requirement is to implement the 'eval_board' function with
    the same method declaration as shown below.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        'patterns' are possible features indicating winning.
        'i' means it is 'my' marker;
        't' means it is 'the other' marker.
        For example, if my marker is 'X', then 'i'='X' and 't'='O'.
        \"\"\"" code nil (reparse-symbol indented_block_body) [484 709])
                            ("self" variable nil (reparse-symbol indented_block_body) [718 1038]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [469 473]))                          
                        :documentation "
        'patterns' are possible features indicating winning.
        'i' means it is 'my' marker;
        't' means it is 'the other' marker.
        For example, if my marker is 'X', then 'i'='X' and 't'='O'.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [456 1039])
                    ("eval_board" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1059 1063])
                            ("board" variable nil (reparse-symbol function_parameters) [1065 1070])
                            ("this_player" variable nil (reparse-symbol function_parameters) [1072 1083]))                          
                        :documentation "
        Evaluate the board standing in 'this_player' position

        :param board:
        :param this_player: either 'X' or 'O'
        :return: the winning score for 'this_player'
        ")
                        (reparse-symbol indented_block_body) [1044 1460])
                    ("eval_player" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1481 1485])
                            ("board" variable nil (reparse-symbol function_parameters) [1487 1492])
                            ("player" variable nil (reparse-symbol function_parameters) [1494 1500]))                          
                        :documentation "
        It checks rows, columns, diagonal and counter diagonal for local patterns.
        ")
                        (reparse-symbol indented_block_body) [1465 3693]))                  
                :type "class")
                nil [197 3693]))          
      :file "heuristics.py"
      :pointmax 3693
      :fsize 3692
      :lastmodtime '(23954 29086 0 0)
      :unmatched-syntax '((NAME 3095 . 3106) (IF 3113 . 3115) (ELSE 3130 . 3134) (NAME 1302 . 1313) (IF 1320 . 1322) (ELSE 1342 . 1346)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
@author: nmg
\"\"\"" code nil nil [48 68])
            ("heuristics" include nil nil [70 103])
            ("MyHeuristics_New" type
               (:superclasses ("Heuristics")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [173 191])
                            ("self" variable nil (reparse-symbol indented_block_body) [200 934]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158 162]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [145 935]))                  
                :type "class")
                nil [105 935]))          
      :file "naive_heuristics.py"
      :pointmax 935
      :fsize 341
      :lastmodtime '(23947 63104 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Let's play the tic-tac-toe game!

@author: milos
\"\"\"" code nil nil [1 57])
            ("tictactoe" include nil nil [58 89])
            ("player" include nil nil [90 115])
            ("heuristics" include nil nil [116 149])
            ("naive_heuristics" include nil nil [150 194])
            ("myh_score" include nil nil [195 235])
            ("basic_h" variable nil nil [257 279])
            ("naive_h" variable nil nil [280 307])
            ("my_h_score" variable nil nil [308 341])
            ("playerA" variable nil nil [359 402])
            ("playerB" variable nil nil [403 443])
            ("stats" variable nil nil [444 503])
            ("board_size" variable nil nil [538 551])
            ("k" variable nil nil [589 592])
            ("print" code nil nil [593 626])
            ("playerA" code nil nil [627 647])
            ("playerB" code nil nil [648 668])
            ("for" code nil nil [763 1361])
            ("for" code nil nil [1362 1960]))          
      :file "main_d1.py"
      :pointmax 1960
      :fsize 2041
      :lastmodtime '(23955 50498 899805 768000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "myh_score.py"
      :fsize 1052
      :lastmodtime '(23955 50293 973809 380000)))
  :file "!home!nmg!Code!Python!ai!cs2710-hw4!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
