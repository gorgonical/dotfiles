;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1210 1237])
            ("semantic/format" include nil nil [1238 1264])
            ("pulse" include nil nil [1265 1281])
            ("semantic/senator" include nil nil [1282 1309])
            ("semantic/analyze/refs" include nil nil [1310 1342])
            ("semantic/find" include nil nil [1394 1418])
            ("semantic/analyze" include nil nil [1364 1391])
            ("declare-function" code nil nil [1421 1465])
            ("semantic-ia-completion-format-tag-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [1572 1784])
            ("semantic-ia-insert-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [2143 2262])
            ("semantic-ia-insert-tag-default" function (:arguments ("tag")) nil [2264 2502])
            ("defalias" code nil nil [2504 2683])
            ("semantic-ia-get-completions-deprecated" function (:arguments ("context" "point")) nil [2685 3021])
            ("semantic-ia-complete-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [3038 5249])
            ("semantic-ia-completion-menu-format-tag-function" variable (:default-value (quote semantic-format-tag-uml-concise-prototype)) nil [5251 5480])
            ("semantic-ia-complete-symbol-menu" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [5497 6879])
            ("semantic-ia-complete-tip" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7046 7798])
            ("semantic-ia-show-summary" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7915 8429])
            ("semantic-ia-show-variants" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8512 9909])
            ("semantic-ia--fast-jump-helper" function (:arguments ("dest")) nil [10101 11420])
            ("declare-function" code nil nil [11422 11502])
            ("semantic-ia-fast-jump" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [11519 13932])
            ("semantic-ia-fast-mouse-jump" function
               (:user-visible-flag t
                :arguments ("evt"))
                nil [13949 14274])
            ("semantic-ia-show-doc" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [14447 15829])
            ("semantic-ia-describe-class" function
               (:user-visible-flag t
                :arguments ("typename"))
                nil [15846 17387])
            ("semantic/ia" package nil nil [17389 17411]))          
      :file "ia.el.gz"
      :pointmax 17560
      :fsize 5964
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1418 . 1419) (symbol 1344 . 1361) (open-paren 1343 . 1344)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4339 4352])
            ("semantic" include nil nil [4354 4373])
            ("eieio-opt" include nil nil [4374 4394])
            ("semantic/analyze" include nil nil [4395 4422])
            ("semantic/ctxt" include nil nil [4423 4447])
            ("semantic/decorate" include nil nil [4448 4476])
            ("semantic/format" include nil nil [4477 4503])
            ("semantic/idle" include nil nil [4504 4528])
            ("semantic/find" include nil nil [4605 4629])
            ("semantic/db-find" include nil nil [4631 4658])
            ("semantic-complete-inline-overlay" variable nil nil [4723 4826])
            ("semantic-completion-inline-active-p" function nil nil [4828 5183])
            ("semantic-completion-text" function nil nil [5284 5623])
            ("semantic-completion-delete-text" function nil nil [5625 5904])
            ("semantic-completion-message" function (:arguments ("fmt" "args")) nil [5906 6167])
            ("semantic-completion-collector-engine" variable nil nil [6280 6471])
            ("semantic-completion-display-engine" variable nil nil [6473 6613])
            ("semantic-complete-key-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km " " (quote semantic-complete-complete-space)) (define-key km "	" (quote semantic-complete-complete-tab)) (define-key km "" (quote semantic-complete-done)) (define-key km "" (quote abort-recursive-edit)) (define-key km "\356" (quote next-history-element)) (define-key km "\360" (quote previous-history-element)) (define-key km "" (quote next-history-element)) (define-key km "" (quote previous-history-element)) km)) nil [6615 7197])
            ("semantic-completion-default-history" variable nil nil [7199 7339])
            ("semantic-complete-active-default" variable nil nil [7341 7382])
            ("semantic-complete-current-matched-tag" variable nil nil [7383 7429])
            ("semantic-complete-read-tag-engine" function (:arguments ("collector" "displayor" "prompt" "default-tag" "initial-input" "history")) nil [7431 9655])
            ("semantic-complete-active-default" variable nil nil [9701 9802])
            ("semantic-complete-default-to-tag" function (:arguments ("default")) nil [9804 11362])
            ("semantic-complete-current-matched-tag" variable nil nil [11714 11828])
            ("declare-function" code nil nil [11965 12053])
            ("semantic-complete-current-match" function nil nil [12055 14764])
            ("semantic-complete-done" function (:user-visible-flag t) nil [14871 15103])
            ("semantic-complete-complete-space" function (:user-visible-flag t) nil [15105 15252])
            ("semantic-complete-complete-tab" function (:user-visible-flag t) nil [15254 15416])
            ("semantic-complete-hack-word-boundaries" function (:arguments ("original" "new")) nil [15521 16208])
            ("semantic-complete-try-completion" function (:arguments ("partial")) nil [16210 17991])
            ("semantic-complete-do-completion" function (:arguments ("partial" "inline")) nil [17993 19910])
            ("semantic-complete-inline-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "	" (quote semantic-complete-inline-TAB)) (define-key km "\360" (quote semantic-complete-inline-up)) (define-key km "\356" (quote semantic-complete-inline-down)) (define-key km "" (quote semantic-complete-inline-done)) (define-key km "\203" (quote semantic-complete-inline-exit)) (define-key km "" (quote semantic-complete-inline-quit)) (define-key km "?" (lambda nil (interactive) (describe-variable (quote semantic-complete-inline-map)))) km)) nil [20267 20863])
            ("semantic-complete-inline-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "yellow")) (((class color) (background light)) (:underline "brown"))))
                :type "face")
                nil [20865 21180])
            ("semantic-complete-inline-text" function nil nil [21182 21540])
            ("semantic-complete-inline-delete-text" function nil nil [21542 21796])
            ("semantic-complete-inline-done" function (:user-visible-flag t) nil [21798 22530])
            ("semantic-complete-inline-quit" function (:user-visible-flag t) nil [22532 22665])
            ("semantic-complete-inline-exit" function (:user-visible-flag t) nil [22667 23963])
            ("semantic-complete-pre-command-hook" function nil nil [23965 24549])
            ("semantic-complete-post-command-hook" function nil nil [24551 26409])
            ("semantic-complete-inline-force-display" function nil nil [26411 27170])
            ("semantic-complete-inline-tag-engine" function (:arguments ("collector" "displayor" "buffer" "start" "end")) nil [27172 28752])
            ("semantic-complete-inline-TAB" function (:user-visible-flag t) nil [28796 29094])
            ("semantic-complete-inline-down" function (:user-visible-flag t) nil [29096 29353])
            ("semantic-complete-inline-up" function (:user-visible-flag t) nil [29355 29614])
            ("semantic-complete-next-action" function (:arguments ("partial")) nil [29857 31331])
            ("semantic-collector-per-buffer-list" variable nil nil [31887 31980])
            ("make-variable-buffer-local" code nil nil [31981 32045])
            ("semantic-collector-list" variable nil nil [32047 32134])
            ("semantic-collector-abstract" type
               (:members 
                  ( ("buffer" variable
                       (:documentation "Originating buffer for this collector.
Some collectors use a given buffer as a starting place while looking up
tags."
                        :type "buffer")
                        nil nil)
                    ("cache" variable
                       (:documentation "Cache of tags.
These tags are re-used during a completion session.
Sometimes these tags are cached between completion sessions."
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-all-completions" variable
                       (:documentation "Last result of `all-completions'.
This result can be used for refined completions as `last-prefix' gets
closer to a specific result."
                        :type "semanticdb-find-result-with-nil")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "The last queried prefix.
This prefix can be used to cache intermediate completion offers.
making the action of homing in on a token faster."
                        :protection ":protected"
                        :type "string")
                        nil nil)
                    ("last-completion" variable
                       (:documentation "The last calculated completion.
This completion is calculated and saved for future use."
                        :type "(or null string)")
                        nil nil)
                    ("last-whitespace-completion" variable
                       (:documentation "The last whitespace completion.
For partial completion, SPC will disambiguate over whitespace type
characters.  This is the last calculated version."
                        :type "(or null string)")
                        nil nil)
                    ("current-exact-match" variable
                       (:documentation "The list of matched tags.
When tokens are matched, they are added to this list."
                        :protection ":protected"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [32136 33786])
            ("semantic-collector-analyze-completions" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("context" variable
                       (:documentation "An analysis context.
Specifies some context location from whence completion lists will be drawn."
                        :type "semantic-analyze-context")
                        nil nil)
                    ("first-pass-completions" variable
                       (:documentation "List of valid completion tags.
This list of tags is generated when completion starts.  All searches
derive from this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [33819 34463])
            ("cl-defmethod" code nil nil [34465 35159])
            ("cl-defmethod" code nil nil [35161 35291])
            ("cl-defmethod" code nil nil [35293 36274])
            ("cl-defmethod" code nil nil [36276 36521])
            ("cl-defmethod" code nil nil [36523 36759])
            ("cl-defmethod" code nil nil [36761 37489])
            ("cl-defmethod" code nil nil [37491 40256])
            ("cl-defmethod" code nil nil [40258 41591])
            ("cl-defmethod" code nil nil [41594 41979])
            ("cl-defmethod" code nil nil [41981 42228])
            ("cl-defmethod" code nil nil [42230 42646])
            ("cl-defmethod" code nil nil [42648 42952])
            ("cl-defmethod" code nil nil [42954 43348])
            ("cl-defmethod" code nil nil [43350 43490])
            ("cl-defmethod" code nil nil [43492 43837])
            ("semantic-collector-buffer-abstract" type
               (:superclasses "semantic-collector-abstract"
                :type "class")
                nil [43857 44058])
            ("cl-defmethod" code nil nil [44060 44664])
            ("semantic-collector-buffer-flush" function (:arguments ("newcache")) nil [44720 45033])
            ("add-hook" code nil nil [45035 45124])
            ("semantic-collector-buffer-deep" type
               (:superclasses "semantic-collector-buffer-abstract"
                :type "class")
                nil [45165 45409])
            ("cl-defmethod" code nil nil [45411 45779])
            ("semantic-collector-project-abstract" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("path" variable
                       (:documentation "List of database tables to search.
At creation time, it can be anything accepted by
`semanticdb-find-translate-path' as a PATH argument."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [45816 46223])
            ("semantic-collector-project" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46244 46369])
            ("cl-defmethod" code nil nil [46372 46615])
            ("semantic-collector-project-brutish" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46644 46777])
            ("declare-function" code nil nil [46779 46867])
            ("cl-defmethod" code nil nil [46869 47161])
            ("semantic-collector-local-members" type
               (:superclasses "semantic-collector-project-abstract"
                :members 
                  ( ("scope" variable
                       (:documentation "The scope the local members are being completed from."
                        :default-value "nil"
                        :type "(or null semantic-scope-cache)")
                        nil nil))                  
                :type "class")
                nil [47199 47468])
            ("cl-defmethod" code nil nil [47470 47890])
            ("semantic-displayor-abstract" type
               (:members 
                  ( ("table" variable
                       (:documentation "List of tags this displayor is showing."
                        :protection ":protected"
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "Prefix associated with slot `table'"
                        :protection ":protected"
                        :type "string")
                        nil nil))                  
                :type "class")
                nil [48862 49395])
            ("cl-defmethod" code nil nil [49397 49527])
            ("cl-defmethod" code nil nil [49529 49915])
            ("cl-defmethod" code nil nil [49917 50140])
            ("cl-defmethod" code nil nil [50142 50279])
            ("cl-defmethod" code nil nil [50281 50437])
            ("cl-defmethod" code nil nil [50439 50625])
            ("cl-defmethod" code nil nil [50627 50765])
            ("cl-defmethod" code nil nil [50767 50897])
            ("cl-defmethod" code nil nil [50899 51102])
            ("semantic-completion-displayor-format-tag-function" variable (:default-value (function semantic-format-tag-name)) nil [51129 51337])
            ("semantic-displayor-traditional" type
               (:superclasses "semantic-displayor-abstract"
                :type "class")
                nil [51339 51637])
            ("cl-defmethod" code nil nil [51639 52047])
            ("semantic-displayor-focus-abstract" type
               (:superclasses "semantic-displayor-abstract"
                :members 
                  ( ("focus" variable
                       (:documentation "A tag index from `table' which has focus.
Multiple calls to the display function can choose to focus on a
given tag, by highlighting its location."
                        :protection ":protected"
                        :type "number")
                        nil nil)
                    ("find-file-focus" variable
                       (:documentation "Non-nil if focusing requires a tag's buffer be in memory."
                        :static-flag t
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [52111 52750])
            ("cl-defmethod" code nil nil [52752 53314])
            ("cl-defmethod" code nil nil [53316 53544])
            ("cl-defmethod" code nil nil [53546 53989])
            ("cl-defmethod" code nil nil [53991 54442])
            ("cl-defmethod" code nil nil [54444 54718])
            ("cl-defmethod" code nil nil [54720 55487])
            ("semantic-displayor-traditional-with-focus-highlight" type
               (:interfaces ("semantic-displayor-traditional")
                :superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("find-file-focus" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [55596 56083])
            ("cl-defmethod" code nil nil [56085 58242])
            ("semantic-displayor-tooltip-mode" variable (:default-value (quote standard)) nil [58495 59253])
            ("semantic-displayor-tooltip-initial-max-tags" variable (:default-value 5) nil [59270 59500])
            ("semantic-displayor-tooltip-max-tags" variable (:default-value 25) nil [59502 60176])
            ("semantic-displayor-tooltip" type
               (:superclasses "semantic-displayor-traditional"
                :members 
                  ( ("mode" variable
                       (:documentation "See `semantic-displayor-tooltip-mode'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-mode))")
                        nil nil)
                    ("max-tags-initial" variable
                       (:documentation "See `semantic-displayor-tooltip-initial-max-tags'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-initial-max-tags))")
                        nil nil)
                    ("typing-count" variable
                       (:documentation "Counter holding how many times the user types space or tab continuously before showing tags."
                        :default-value "0"
                        :type "integer")
                        nil nil)
                    ("shown" variable
                       (:documentation "Flag representing whether tooltip has been shown yet."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [60179 61018])
            ("cl-defmethod" code nil nil [61020 61215])
            ("tooltip-mode" variable nil nil [61217 61238])
            ("cl-defmethod" code nil nil [61240 64169])
            ("semantic-displayor-point-position" function nil nil [64193 64920])
            ("tooltip-frame-parameters" variable nil nil [64923 64956])
            ("declare-function" code nil nil [64957 65029])
            ("semantic-displayor-tooltip-show" function (:arguments ("text")) nil [65031 65480])
            ("cl-defmethod" code nil nil [65482 65753])
            ("semantic-displayor-ghost" type
               (:superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("ghostoverlay" variable
                       (:documentation "The overlay the ghost text is displayed in."
                        :type "overlay")
                        nil nil)
                    ("first-show" variable
                       (:documentation "Non nil if we have not seen our first show request."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [65844 66347])
            ("cl-defmethod" code nil nil [66349 66725])
            ("cl-defmethod" code nil nil [66727 66946])
            ("cl-defmethod" code nil nil [66948 67174])
            ("cl-defmethod" code nil nil [67177 67639])
            ("cl-defmethod" code nil nil [67641 69030])
            ("semantic-complete-inline-custom-type" variable (:default-value (append (quote (radio)) (mapcar (lambda (class) (let* ((C (intern (car class))) (doc (documentation-property C (quote variable-documentation))) (doc1 (car (split-string doc "
")))) (list (quote const) :tag doc1 C))) (eieio-build-class-alist (quote semantic-displayor-abstract) t)))) nil [69123 69577])
            ("semantic-complete-inline-analyzer-displayor-class" variable (:default-value (quote semantic-displayor-traditional)) nil [69579 69796])
            ("semantic-complete-read-tag-buffer-deep" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [69798 70660])
            ("semantic-complete-read-tag-local-members" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [70662 71502])
            ("semantic-complete-read-tag-project" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [71504 72374])
            ("semantic-complete-inline-tag-project" function nil nil [72376 74197])
            ("semantic-complete-read-tag-analyzer" function (:arguments ("prompt" "context" "history")) nil [74199 75548])
            ("semantic-complete-inline-analyzer" function (:arguments ("context")) nil [75550 77534])
            ("semantic-complete-inline-analyzer-idle-displayor-class" variable (:default-value (quote semantic-displayor-ghost)) nil [77536 77765])
            ("semantic-complete-inline-analyzer-idle" function (:arguments ("context")) nil [77767 78448])
            ("semantic-complete-jump-local" function (:user-visible-flag t) nil [78467 78896])
            ("semantic-complete-jump" function (:user-visible-flag t) nil [78913 79366])
            ("semantic-complete-jump-local-members" function (:user-visible-flag t) nil [79383 79943])
            ("semantic-complete-analyze-and-replace" function (:user-visible-flag t) nil [79960 80646])
            ("semantic-complete-analyze-inline" function (:user-visible-flag t) nil [80663 81616])
            ("semantic-complete-analyze-inline-idle" function (:user-visible-flag t) nil [81633 82454])
            ("semantic-complete-self-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82471 83455])
            ("semantic-complete-inline-project" function (:user-visible-flag t) nil [83472 84135])
            ("semantic/complete" package nil nil [84137 84165]))          
      :file "complete.el.gz"
      :pointmax 84326
      :fsize 21139
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 4629 . 4630) (symbol 4531 . 4548) (open-paren 4530 . 4531) (close-paren 4352 . 4353) (symbol 4321 . 4338) (open-paren 4320 . 4321))))
  :file "!usr!share!emacs!26.2!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
