;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("VERSION" variable (:default-value ("1")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("3")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("0")) nil [28 41])
            ("EXTRAVERSION" variable (:default-value ("Kitten")) nil [41 63])
            ("NAME" variable (:default-value ("Kitten")) nil [63 75])
            ("MAKEFLAGS" variable (:default-value ("--no-print-directory")) nil [358 392])
            ("PHONY" variable (:default-value ("_all")) nil [2894 2908])
            ("_all" function nil nil [2908 2914])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [3066 3099])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell cd $(KBUILD_OUTPUT) && /bin/pwd)")) nil [3099 3157])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)")) nil [3249 3274])
            ("_all" function nil nil [3275 3458])
            ("$(filter-out _all,$(MAKECMDGOALS))" function nil nil [3275 3458])
            ("skip-makefile" variable (:default-value ("1")) nil [3506 3525])
            ("PHONY" variable (:default-value ("all")) nil [3799 3812])
            ("_all" function (:arguments ("all")) nil [3837 3847])
            ("_all" function (:arguments ("modules")) nil [3852 3866])
            ("srctree" variable (:default-value ("$(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))")) nil [3873 3929])
            ("TOPDIR" variable (:default-value ("$(srctree)")) nil [3929 3951])
            ("objtree" variable (:default-value ("$(CURDIR)")) nil [4001 4023])
            ("src" variable (:default-value ("$(srctree)")) nil [4023 4042])
            ("obj" variable (:default-value ("$(objtree)")) nil [4042 4061])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [4062 4123])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ )")) nil [4499 4704])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [5687 5710])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [5710 5730])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [5842 5984])
            ("HOSTCC" variable (:default-value ("gcc")) nil [5985 6000])
            ("HOSTCXX" variable (:default-value ("g++")) nil [6000 6016])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer" "-Wno-unused" "-Wno-format-security" "-U_FORTIFY_SOURCE")) nil [6016 6136])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [6136 6155])
            ("KBUILD_MODULES" variable nil nil [6242 6260])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [6260 6280])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(srctree)")) nil [8243 8281])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [8317 8360])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [8494 8519])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [8519 8544])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [8544 8570])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [8570 8586])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [8586 8611])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [8611 8636])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [8636 8667])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [8667 8702])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [8702 8737])
            ("AWK" variable (:default-value ("awk")) nil [8737 8748])
            ("GENKSYMS" variable (:default-value ("scripts/genksyms/genksyms")) nil [8748 8785])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [8785 8808])
            ("KALLSYMS" variable (:default-value ("scripts/kallsyms")) nil [8808 8836])
            ("PERL" variable (:default-value ("perl")) nil [8836 8849])
            ("CHECK" variable (:default-value ("sparse")) nil [8849 8865])
            ("CHECKFLAGS" variable (:default-value ("-D__lwk__" "-Dlwk" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "$(CF)")) nil [8866 8945])
            ("MODFLAGS" variable (:default-value ("-DMODULE")) nil [8945 8965])
            ("CFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [8965 8995])
            ("AFLAGS_MODULE" variable (:default-value ("$(MODFLAGS)")) nil [8995 9025])
            ("LDFLAGS_MODULE" variable (:default-value ("-r")) nil [9025 9046])
            ("CFLAGS_KERNEL" variable nil nil [9046 9062])
            ("AFLAGS_KERNEL" variable nil nil [9062 9078])
            ("LINUX_INCLUDE" variable (:default-value ("-Iofed/include")) nil [9078 9111])
            ("LWKINCLUDE" variable (:default-value ("-Iinclude" "$(LINUX_INCLUDE)" "$(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include)" "-include" "include/lwk/autoconf.h")) nil [9223 9372])
            ("CPPFLAGS" variable (:default-value ("-D__KERNEL__" "$(LWKINCLUDE)" "-D__LWK__")) nil [9373 9429])
            ("CFLAGS" variable (:default-value ("-std=gnu99" "-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-strict-overflow" "-fno-common" "-fno-pie")) nil [9430 9579])
            ("CFLAGS" variable (:default-value ("-fno-stack-protector")) nil [9629 9661])
            ("CFLAGS" variable (:default-value ("-fgnu89-inline")) nil [9714 9740])
            ("AFLAGS" variable (:default-value ("-D__ASSEMBLY__")) nil [9747 9773])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat .kernelrelease 2> /dev/null)")) nil [9830 9887])
            ("KERNELVERSION" variable (:default-value ("$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)")) nil [9887 9955])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10513 10600])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [10513 10600])
            ("RCS_FIND_IGNORE" variable (:default-value ("\\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [10643 10775])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10775 10907])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [10775 10907])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [11078 11101])
            ("scripts_basic" function nil nil [11101 11152])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [11219 11252])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [11253 11277])
            ("outputmakefile" function nil nil [11442 11458])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "TAGS" "tags" "help" "%docs" "check%")) nil [12026 12117])
            ("config-targets" variable (:default-value ("0")) nil [12118 12138])
            ("mixed-targets" variable (:default-value ("0")) nil [12138 12158])
            ("dot-config" variable (:default-value ("1")) nil [12158 12178])
            ("%" function (:arguments ("FORCE")) nil [12806 12858])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [13255 13299])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13324 13488])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [13489 13654])
            ("PHONY" variable (:default-value ("scripts")) nil [14030 14047])
            ("scripts" function (:arguments ("scripts_basic" "include/config/MARKER")) nil [14047 14119])
            ("scripts_basic" function (:arguments ("include/lwk/autoconf.h")) nil [14120 14158])
            ("drivers-y" variable (:default-value ("drivers/")) nil [14220 14242])
            ("net-y" variable (:default-value ("net/")) nil [14242 14257])
            ("block-y" variable (:default-value ("block/")) nil [14257 14283])
            ("libs-y" variable (:default-value ("lib/")) nil [14283 14299])
            ("ofed-y" variable (:default-value ("ofed/")) nil [14319 14344])
            (".config" include nil nil [14564 14580])
            (".kconfig.d" function (:arguments (";")) nil [14747 14769])
            (".config" function (:arguments (";")) nil [14747 14769])
            ("include/lwk/autoconf.h" function (:arguments (".kconfig.d" ".config")) nil [15021 15142])
            ("include/lwk/autoconf.h" function (:arguments (";")) nil [15199 15225])
            ("DEFAULT_EXTRA_TARGETS" variable (:default-value ("vmlwk.bin" "vmlwk.asm" "init_task")) nil [15232 15284])
            ("all" function (:arguments ("vmlwk" "$(DEFAULT_EXTRA_TARGETS)")) nil [15508 15544])
            ("CFLAGS" variable (:default-value ("-Os")) nil [15579 15594])
            ("CFLAGS" variable (:default-value ("-O2")) nil [15599 15614])
            ("CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "$(call cc-option,-fno-optimize-sibling-calls,)")) nil [15648 15730])
            ("CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [15735 15767])
            ("CFLAGS" variable (:default-value ("-fasynchronous-unwind-tables")) nil [15799 15839])
            ("CFLAGS" variable (:default-value ("-g")) nil [15870 15884])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [15892 15936])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [16014 16091])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [16091 16127])
            ("CFLAGS" variable (:default-value ("$(call cc-option,-Wno-pointer-sign,)")) nil [16177 16224])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [16865 16923])
            ("core-y" variable (:default-value ("kernel/" "modules/")) nil [17018 17046])
            ("vmlwk-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(ofed-y) $(ofed-m)\\
		     $(net-y) $(net-m) $(block-y) $(block-m) $(libs-y) $(libs-m)))")) nil [17047 17264])
            ("vmlwk-alldirs" variable (:default-value ("$(sort $(vmlwk-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-n) $(init-) \\
		     $(core-n) $(core-) $(drivers-n) $(drivers-) \\
		     $(ofed-n) $(ofed-) \\
		     $(net-n)  $(net-) $(block-n) $(block-)  $(libs-n)    $(libs-))))")) nil [17265 17515])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [17516 17567])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [17567 17618])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [17618 17674])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [17674 17723])
            ("block-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(block-y))")) nil [17723 17783])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [17783 17830])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [17830 17882])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [17882 17915])
            ("ofed-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(ofed-y))")) nil [17969 18028])
            ("v3vee-objs" variable nil nil [19141 19155])
            ("v3vee-objs" variable (:default-value ("$(CONFIG_PALACIOS_PATH)/libv3vee.a")) nil [19178 19227])
            ("v3vee" function (:arguments ("FORCE")) nil [19234 19247])
            ("vmlwk-init" variable (:default-value ("$(head-y)" "$(init-y)")) nil [19309 19343])
            ("vmlwk-main" variable (:default-value ("$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)" "$(block-y)" "$(ofed-y)")) nil [19343 19420])
            ("vmlwk-all" variable (:default-value ("$(vmlwk-init)" "$(vmlwk-main)")) nil [19420 19462])
            ("vmlwk-lds" variable (:default-value ("arch/$(SRCARCH)/kernel/vmlwk.lds")) nil [19462 19509])
            ("quiet_cmd_vmlwk_version" variable (:default-value ("GEN" ".version")) nil [19962 20005])
            ("quiet_cmd_sysmap" variable (:default-value ("SYSMAP")) nil [20298 20325])
            ("last_kallsyms" variable (:default-value ("3")) nil [22141 22160])
            ("last_kallsyms" variable (:default-value ("2")) nil [22165 22184])
            ("kallsyms.o" variable (:default-value (".tmp_kallsyms$(last_kallsyms).o")) nil [22191 22237])
            ("cmd_ksym_ld" variable (:default-value ("$(cmd_vmlwk__)")) nil [22799 22828])
            ("quiet_cmd_kallsyms" variable (:default-value ("KSYM" "$@")) nil [23007 23039])
            (".tmp_kallsyms2.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23158 23264])
            (".tmp_kallsyms1.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [23158 23264])
            (".tmp_kallsyms%.S" function (:arguments (".tmp_vmlwk%" "$(KALLSYMS)")) nil [23265 23329])
            (".tmp_vmlwk1" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" "FORCE")) nil [23402 23480])
            (".tmp_vmlwk2" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms1.o" "FORCE")) nil [23481 23571])
            (".tmp_vmlwk3" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-all)" ".tmp_kallsyms2.o" "FORCE")) nil [23572 23662])
            ("$(KALLSYMS)" function (:arguments ("scripts" ";")) nil [23721 23744])
            ("debug_kallsyms" function (:arguments (".tmp_map$(last_kallsyms)")) nil [23806 23847])
            (".tmp_map%" function (:arguments (".tmp_vmlwk%" "FORCE")) nil [23848 23962])
            (".tmp_map3" function (:arguments (".tmp_map2")) nil [23963 23984])
            (".tmp_map2" function (:arguments (".tmp_map1")) nil [23985 24006])
            ("vmlwk" function (:arguments ("$(vmlwk-lds)" "$(vmlwk-init)" "$(vmlwk-main)" "v3vee" "$(kallsyms.o)" "FORCE")) nil [24088 24219])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24389 24511])
            ("vmlwk.bin" function (:arguments ("vmlwk")) nil [24516 24561])
            ("vmlwk.asm" function (:arguments ("vmlwk")) nil [24568 24619])
            ("$(vmlwk-lds)" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24711 24777])
            ("$(sort $(vmlwk-init) $(vmlwk-main))" function (:arguments ("$(vmlwk-dirs)" ";")) nil [24711 24777])
            ("PHONY" variable (:default-value ("$(vmlwk-dirs)")) nil [25060 25083])
            ("$(vmlwk-dirs)" function (:arguments ("prepare" "scripts")) nil [25083 25139])
            ("nullstring" variable nil nil [25507 25521])
            ("space" variable (:default-value ("$(nullstring)")) nil [25521 25563])
            ("___localver" variable (:default-value ("$(objtree)/localversion*" "$(srctree)/localversion*")) nil [25564 25628])
            ("__localver" variable (:default-value ("$(sort $(wildcard $(___localver)))")) nil [25628 25677])
            ("_localver" variable (:default-value ("$(foreach f, $(__localver), $(if $(findstring ~, $(f)),,$(f)))")) nil [25714 25789])
            ("localver" variable (:default-value ("$(subst $(space),, \\
	   $(shell cat /dev/null $(_localver)) \\
	   $(patsubst \"%\",%,$(CONFIG_LOCALVERSION)))")) nil [25790 25910])
            ("localver-full" variable (:default-value ("$(localver)$(localver-auto)")) nil [26445 26489])
            ("kernelrelease" variable (:default-value ("$(KERNELVERSION)$(localver-full)")) nil [26542 26591])
            (".kernelrelease" function (:arguments ("FORCE")) nil [26591 26659])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [27006 27071])
            ("PHONY" variable (:default-value ("prepare-all")) nil [27134 27155])
            ("prepare3" function (:arguments (".kernelrelease")) nil [27392 27417])
            ("prepare2" function (:arguments ("prepare3" "outputmakefile")) nil [27991 28025])
            ("prepare1" function (:arguments ("prepare2" "include/lwk/version.h" "include/arch" "linux/include/asm" "include/config/MARKER")) nil [28026 28141])
            ("archprepare" function (:arguments ("prepare1" "scripts_basic")) nil [28228 28264])
            ("prepare0" function (:arguments ("archprepare" "FORCE")) nil [28265 28317])
            ("prepare-all" function (:arguments ("prepare0")) nil [28340 28370])
            ("prepare" function (:arguments ("prepare0")) nil [28340 28370])
            ("include/arch" function (:arguments ("FORCE")) nil [28632 29511])
            ("linux/include/asm" function (:arguments ("FORCE")) nil [29512 30420])
            ("include/config/MARKER" function (:arguments ("scripts/basic/split-include" "include/lwk/autoconf.h")) nil [30468 30683])
            ("uts_len" variable (:default-value ("64")) nil [30921 30935])
            ("include/lwk/version.h" function (:arguments ("$(srctree)/Makefile" ".config" ".kernelrelease" "FORCE")) nil [31356 31455])
            ("PHONY" variable (:default-value ("depend" "dep")) nil [31535 31555])
            ("dep" function nil nil [31555 31617])
            ("depend" function nil nil [31555 31617])
            ("INSTALL_HDR_PATH" variable (:default-value ("$(MODLIB)/abi")) nil [31713 31744])
            ("PHONY" variable (:default-value ("headers_install")) nil [31769 31794])
            ("headers_install" function (:arguments ("include/lwk/version.h")) nil [31794 31972])
            ("PHONY" variable (:default-value ("headers_check")) nil [31973 31996])
            ("headers_check" function (:arguments ("headers_install")) nil [31996 32110])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [32455 32483])
            ("CLEAN_FILES" variable (:default-value ("vmlwk" "System.map" "vmlwk.bin" "vmlwk.asm" ".tmp_kallsyms*" ".tmp_version" ".tmp_vmlwk*" ".tmp_System.map")) nil [32483 32609])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "include2")) nil [32661 32703])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" "include/arch" "linux/include/asm" ".version" ".old_version" "include/lwk/autoconf.h" "include/lwk/version.h" ".kernelrelease" "Module.symvers" "tags" "TAGS" "cscope*")) nil [32703 32913])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [32982 33015])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [33015 33049])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(srctree) $(vmlwk-alldirs))")) nil [33049 33117])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean")) nil [33118 33157])
            ("$(clean-dirs)" function nil nil [33157 33220])
            ("clean" function (:arguments ("archclean" "$(clean-dirs)")) nil [33221 33543])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [33605 33656])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [33656 33708])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_, scripts)")) nil [33785 33840])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [33841 33889])
            ("$(mrproper-dirs)" function nil nil [33889 33958])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [33959 34046])
            ("PHONY" variable (:default-value ("distclean")) nil [34061 34080])
            ("distclean" function (:arguments ("mrproper")) nil [34081 34369])
            ("package-dir" variable (:default-value ("$(srctree)/scripts/package")) nil [34539 34581])
            ("%pkg" function (:arguments ("FORCE")) nil [34582 34634])
            ("rpm" function (:arguments ("FORCE")) nil [34634 34685])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [34816 34885])
            ("boards" variable (:default-value ("$(notdir $(boards))")) nil [34885 34915])
            ("help" function nil nil [34916 36628])
            ("%docs" function (:arguments ("scripts_basic" "FORCE")) nil [37192 37266])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [38049 38069])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [38069 38090])
            ("crmodverdir" function nil nil [38090 38156])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [38157 38211])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [38211 38243])
            ("$(module-dirs)" function (:arguments ("crmodverdir")) nil [38243 38320])
            ("modules" function (:arguments ("$(module-dirs)")) nil [38321 38384])
            ("PHONY" variable (:default-value ("modules_install")) nil [38442 38467])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [38467 38510])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [38511 38576])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [38576 38596])
            ("_emodinst_" function nil nil [38596 38703])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [38769 38813])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [39128 39152])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [39152 39199])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [39200 39252])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [39253 39282])
            ("$(clean-dirs)" function nil nil [39282 39345])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [39346 39377])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [39377 39612])
            ("help" function nil nil [39613 39935])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [39949 39974])
            ("prepare" function (:arguments (";")) nil [39974 39985])
            ("scripts" function (:arguments (";")) nil [39985 39996])
            ("__srctree" variable nil nil [40379 40391])
            ("__srctree" variable (:default-value ("$(srctree)/")) nil [40396 40420])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)" "$(SUBARCH)")) nil [40472 40511])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40516 40544])
            ("ALLINCLUDE_ARCHS" variable (:default-value ("$(ALLSOURCE_ARCHS)")) nil [40648 40687])
            ("ALLSOURCE_ARCHS" variable (:default-value ("$(ARCH)")) nil [40694 40721])
            ("quiet_cmd_cscope-file" variable (:default-value ("FILELST" "cscope.files")) nil [41869 41914])
            ("quiet_cmd_cscope" variable (:default-value ("MAKE" "cscope.out")) nil [41991 42029])
            ("cscope" function (:arguments ("FORCE")) nil [42059 42118])
            ("quiet_cmd_TAGS" variable (:default-value ("MAKE" "$@")) nil [42119 42146])
            ("TAGS" function (:arguments ("FORCE")) nil [42520 42550])
            ("quiet_cmd_tags" variable (:default-value ("MAKE" "$@")) nil [42552 42579])
            ("tags" function (:arguments ("FORCE")) nil [42953 42983])
            ("includecheck" function nil nil [43114 43245])
            ("versioncheck" function nil nil [43246 43376])
            ("namespacecheck" function nil nil [43377 43434])
            ("PHONY" variable (:default-value ("checkstack")) nil [43503 43523])
            ("checkstack" function nil nil [43523 43633])
            ("kernelrelease" function nil nil [43634 43781])
            ("kernelversion" function nil nil [43781 43820])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44476 44568])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44568 44660])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44660 44752])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [44752 44846])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44846 44938])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [44938 45030])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45041 45145])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [45145 45250])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [45250 45427])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [45555 45634])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [45672 45754])
            ("a_flags" variable (:default-value ("-Wp,-MD,$(depfile)" "$(AFLAGS)" "$(AFLAGS_KERNEL)" "$(NOSTDINC_FLAGS)" "$(CPPFLAGS)" "$(modkern_aflags)" "$(EXTRA_AFLAGS)" "$(AFLAGS_$(*F).o)")) nil [45794 45942])
            ("quiet_cmd_as_o_S" variable (:default-value ("AS" "$@")) nil [45943 45973])
            ("cmd_as_o_S" variable (:default-value ("$(CC)" "$(a_flags)" "-c" "-o" "$@" "$<")) nil [45973 46021])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [46054 46096])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [46096 46183])
            ("clean" variable (:default-value ("-f" "$(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean" "obj")) nil [46401 46471])
            ("init_task" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46562 46604])
            ("user" function (:arguments ("O:=$(if $O,$O,$(objtree))")) nil [46562 46604])
            ("user" function (:arguments ("FORCE")) nil [46658 46796])
            ("init_task" function (:arguments ("user" "FORCE")) nil [46853 46925])
            ("PHONY" variable (:default-value ("FORCE")) nil [46926 46941])
            ("FORCE" function nil nil [46941 46948]))          
      :file "Makefile"
      :pointmax 47109
      :fsize 47108
      :lastmodtime '(24280 273)
      :unmatched-syntax '((semantic-list 47101 . 47108) (punctuation 47100 . 47101) (punctuation 47098 . 47099) (symbol 47092 . 47098) (bol 47092 . 47092) (ENDIF 46472 . 46477) (bol 46472 . 46472) (semantic-list 46284 . 46295) (punctuation 46283 . 46284) (INCLUDE 46275 . 46282) (bol 46273 . 46273) (punctuation 46222 . 46223) (punctuation 46220 . 46221) (semantic-list 46209 . 46220) (punctuation 46208 . 46209) (bol 46206 . 46206) (semantic-list 45781 . 45791) (punctuation 45780 . 45781) (symbol 45777 . 45779) (symbol 45774 . 45776) (punctuation 45772 . 45773) (symbol 45760 . 45771) (bol 45754 . 45754) (semantic-list 45661 . 45670) (punctuation 45660 . 45661) (symbol 45656 . 45659) (symbol 45653 . 45655) (punctuation 45651 . 45652) (symbol 45640 . 45650) (bol 45634 . 45634) (semantic-list 44427 . 44468) (punctuation 44426 . 44427) (punctuation 44424 . 44425) (symbol 44413 . 44423) (bol 44405 . 44405) (semantic-list 44373 . 44404) (punctuation 44372 . 44373) (semantic-list 44357 . 44372) (punctuation 44356 . 44357) (punctuation 44354 . 44355) (symbol 44343 . 44352) (bol 44335 . 44335) (semantic-list 44293 . 44334) (punctuation 44292 . 44293) (punctuation 44291 . 44292) (symbol 44282 . 44291) (bol 44274 . 44274) (semantic-list 44260 . 44268) (punctuation 44259 . 44260) (punctuation 44257 . 44258) (symbol 44246 . 44256) (bol 44238 . 44238) (semantic-list 44212 . 44237) (punctuation 44211 . 44212) (punctuation 44209 . 44210) (symbol 44198 . 44207) (bol 44190 . 44190) (ENDIF 43469 . 43474) (bol 43469 . 43469) (ENDIF 43435 . 43440) (bol 43435 . 43435) (symbol 42946 . 42951) (bol 42946 . 42946) (shell-command 42596 . 42945) (bol 42595 . 42595) (symbol 42586 . 42594) (symbol 42579 . 42585) (bol 42579 . 42579) (symbol 42513 . 42518) (bol 42513 . 42513) (shell-command 42163 . 42512) (bol 42162 . 42162) (symbol 42153 . 42161) (symbol 42146 . 42152) (bol 42146 . 42146) (symbol 42055 . 42057) (symbol 42048 . 42054) (punctuation 42046 . 42047) (symbol 42035 . 42045) (bol 42029 . 42029) (symbol 41977 . 41989) (symbol 41975 . 41976) (semantic-list 41938 . 41974) (punctuation 41936 . 41937) (symbol 41920 . 41935) (bol 41914 . 41914) (symbol 41862 . 41867) (bol 41862 . 41862) (shell-command 40742 . 41861) (bol 40741 . 40741) (symbol 40729 . 40740) (symbol 40722 . 40728) (bol 40722 . 40722) (ENDIF 39996 . 40001) (bol 39996 . 39996) (symbol 39124 . 39126) (punctuation 39079 . 39080) (semantic-list 39064 . 39079) (punctuation 39063 . 39064) (semantic-list 38964 . 39039) (punctuation 38963 . 38964) (symbol 38916 . 38926) (symbol 38913 . 38915) (symbol 38909 . 38912) (semantic-list 38900 . 38908) (punctuation 38899 . 38900) (symbol 38870 . 38874) (punctuation 38868 . 38869) (semantic-list 38835 . 38868) (IF 38832 . 38834) (punctuation 38830 . 38831) (symbol 38819 . 38829) (bol 38813 . 38813) (ELSE 37267 . 37271) (bol 37267 . 37267) (shell-command 37040 . 37087) (bol 37039 . 37039) (shell-command 36963 . 37038) (bol 36962 . 36962) (shell-command 36952 . 36961) (bol 36951 . 36951) (shell-command 36869 . 36950) (bol 36868 . 36868) (shell-command 36795 . 36867) (bol 36794 . 36794) (shell-command 36710 . 36793) (bol 36709 . 36709) (shell-command 36630 . 36708) (bol 36629 . 36629) (symbol 31751 . 31767) (symbol 31744 . 31750) (bol 31744 . 31744) (symbol 31349 . 31354) (bol 31349 . 31349) (shell-command 30962 . 31348) (bol 30961 . 30961) (symbol 30943 . 30960) (symbol 30936 . 30942) (bol 30936 . 30936) (semantic-list 28520 . 28529) (punctuation 28519 . 28520) (symbol 28517 . 28519) (symbol 28514 . 28516) (symbol 28511 . 28513) (punctuation 28509 . 28510) (punctuation 28508 . 28509) (symbol 28489 . 28507) (symbol 28482 . 28488) (bol 28482 . 28482) (shell-command 28196 . 28220) (bol 28195 . 28195) (shell-command 28169 . 28194) (bol 28168 . 28168) (shell-command 27846 . 27916) (bol 27845 . 27845) (shell-command 27779 . 27844) (bol 27778 . 27778) (shell-command 27717 . 27777) (bol 27716 . 27716) (shell-command 27662 . 27715) (bol 27661 . 27661) (shell-command 27490 . 27660) (bol 27489 . 27489) (shell-command 27441 . 27488) (bol 27440 . 27440) (shell-command 26388 . 26437) (bol 26387 . 26387) (shell-command 26278 . 26386) (bol 26277 . 26277) (shell-command 25911 . 25918) (bol 25910 . 25910) (ENDIF 24007 . 24012) (bol 24007 . 24007) (punctuation 23155 . 23156) (punctuation 23154 . 23155) (symbol 23152 . 23153) (semantic-list 23110 . 23151) (punctuation 23109 . 23110) (semantic-list 23075 . 23085) (punctuation 23074 . 23075) (symbol 23072 . 23073) (symbol 23070 . 23071) (punctuation 23069 . 23070) (symbol 23066 . 23068) (semantic-list 23061 . 23065) (punctuation 23060 . 23061) (punctuation 23058 . 23059) (symbol 23045 . 23057) (bol 23039 . 23039) (symbol 22957 . 22962) (bol 22957 . 22957) (shell-command 22902 . 22956) (bol 22901 . 22901) (shell-command 22881 . 22900) (bol 22880 . 22880) (shell-command 22853 . 22879) (bol 22852 . 22852) (shell-command 22849 . 22851) (bol 22848 . 22848) (symbol 22835 . 22847) (symbol 22828 . 22834) (bol 22828 . 22828) (symbol 22628 . 22633) (bol 22628 . 22628) (shell-command 22436 . 22627) (bol 22435 . 22435) (shell-command 22262 . 22434) (bol 22261 . 22261) (symbol 22245 . 22260) (symbol 22238 . 22244) (bol 22238 . 22238) (symbol 21138 . 21143) (bol 21138 . 21138) (shell-command 21119 . 21137) (bol 21118 . 21118) (shell-command 20822 . 21117) (bol 20821 . 20821) (shell-command 20765 . 20819) (bol 20764 . 20764) (shell-command 20744 . 20763) (bol 20743 . 20743) (shell-command 20689 . 20741) (bol 20688 . 20688) (shell-command 20686 . 20687) (bol 20685 . 20685) (symbol 20672 . 20684) (symbol 20665 . 20671) (bol 20665 . 20665) (symbol 20370 . 20387) (semantic-list 20361 . 20370) (punctuation 20360 . 20361) (semantic-list 20345 . 20359) (punctuation 20344 . 20345) (punctuation 20342 . 20343) (symbol 20331 . 20341) (bol 20325 . 20325) (symbol 20268 . 20274) (punctuation 20267 . 20268) (semantic-list 20260 . 20267) (punctuation 20259 . 20260) (semantic-list 20252 . 20258) (punctuation 20251 . 20252) (punctuation 20241 . 20242) (symbol 20239 . 20241) (punctuation 20234 . 20235) (symbol 20225 . 20234) (symbol 20223 . 20224) (punctuation 20221 . 20222) (semantic-list 20202 . 20220) (punctuation 20201 . 20202) (punctuation 20200 . 20201) (symbol 20199 . 20200) (symbol 20194 . 20198) (punctuation 20185 . 20186) (symbol 20173 . 20185) (symbol 20164 . 20172) (symbol 20161 . 20163) (ELSE 20146 . 20150) (punctuation 20138 . 20139) (symbol 20129 . 20138) (symbol 20127 . 20128) (symbol 20122 . 20126) (punctuation 20112 . 20113) (symbol 20104 . 20112) (symbol 20101 . 20103) (symbol 20098 . 20100) (symbol 20086 . 20090) (punctuation 20084 . 20085) (semantic-list 20067 . 20084) (IF 20064 . 20066) (punctuation 20037 . 20038) (symbol 20035 . 20037) (symbol 20031 . 20034) (punctuation 20029 . 20030) (symbol 20011 . 20028) (bol 20005 . 20005) (semantic-list 19862 . 19931) (punctuation 19861 . 19862) (symbol 19824 . 19835) (semantic-list 19811 . 19823) (punctuation 19810 . 19811) (semantic-list 19797 . 19809) (punctuation 19796 . 19797) (symbol 19782 . 19795) (semantic-list 19734 . 19746) (punctuation 19733 . 19734) (semantic-list 19721 . 19732) (punctuation 19720 . 19721) (symbol 19717 . 19719) (punctuation 19705 . 19706) (punctuation 19704 . 19705) (symbol 19701 . 19703) (semantic-list 19685 . 19700) (punctuation 19684 . 19685) (semantic-list 19674 . 19683) (punctuation 19673 . 19674) (semantic-list 19668 . 19672) (punctuation 19667 . 19668) (punctuation 19665 . 19666) (punctuation 19664 . 19665) (symbol 19652 . 19663) (bol 19646 . 19646) (punctuation 19644 . 19645) (punctuation 19643 . 19644) (symbol 19635 . 19637) (punctuation 19633 . 19634) (punctuation 19632 . 19633) (symbol 19614 . 19631) (bol 19614 . 19614) (shell-command 19270 . 19301) (bol 19269 . 19269) (symbol 16930 . 16936) (symbol 16923 . 16929) (bol 16923 . 16923) (symbol 16655 . 16660) (punctuation 16653 . 16654) (punctuation 16652 . 16653) (symbol 16639 . 16651) (symbol 16632 . 16638) (bol 16632 . 16632) (symbol 16486 . 16491) (punctuation 16484 . 16485) (punctuation 16483 . 16484) (symbol 16470 . 16482) (symbol 16463 . 16469) (bol 16463 . 16463) (symbol 14552 . 14562) (symbol 14543 . 14551) (bol 14543 . 14543) (ENDIF 14361 . 14366) (bol 14361 . 14361) (symbol 13306 . 13322) (symbol 13299 . 13305) (bol 13299 . 13299) (ENDIF 12599 . 12604) (bol 12591 . 12591) (ENDIF 12585 . 12590) (bol 12569 . 12569) (symbol 12567 . 12568) (punctuation 12565 . 12566) (punctuation 12564 . 12565) (symbol 12550 . 12563) (bol 12526 . 12526) (semantic-list 12478 . 12525) (IFNEQ 12472 . 12477) (bol 12456 . 12456) (symbol 12454 . 12455) (punctuation 12452 . 12453) (punctuation 12451 . 12452) (symbol 12436 . 12450) (bol 12420 . 12420) (semantic-list 12376 . 12419) (IFNEQ 12370 . 12375) (bol 12362 . 12362) (shell-command 12324 . 12329) (bol 12323 . 12323) (shell-command 12306 . 12322) (bol 12305 . 12305) (shell-command 12241 . 12304) (bol 12240 . 12240) (shell-command 11482 . 11585) (bol 11481 . 11481) (symbol 10350 . 10363) (symbol 10336 . 10349) (symbol 10329 . 10335) (symbol 10322 . 10328) (bol 10322 . 10322) (symbol 10307 . 10320) (symbol 10293 . 10306) (symbol 10286 . 10292) (symbol 10279 . 10285) (bol 10279 . 10279) (symbol 10271 . 10278) (symbol 10258 . 10270) (symbol 10247 . 10257) (symbol 10232 . 10246) (symbol 10223 . 10231) (symbol 10216 . 10222) (bol 10216 . 10216) (symbol 10204 . 10214) (symbol 10198 . 10203) (symbol 10183 . 10197) (symbol 10170 . 10182) (symbol 10162 . 10169) (symbol 10147 . 10158) (symbol 10142 . 10146) (symbol 10133 . 10141) (symbol 10129 . 10132) (symbol 10124 . 10128) (symbol 10116 . 10123) (symbol 10108 . 10115) (symbol 10102 . 10107) (symbol 10099 . 10101) (symbol 10096 . 10098) (symbol 10092 . 10095) (symbol 10086 . 10088) (symbol 10083 . 10085) (symbol 10080 . 10082) (symbol 10066 . 10079) (symbol 10055 . 10065) (symbol 10048 . 10054) (symbol 10035 . 10047) (symbol 10027 . 10034) (symbol 10022 . 10026) (symbol 10005 . 10018) (symbol 9991 . 10004) (symbol 9982 . 9990) (symbol 9971 . 9981) (symbol 9963 . 9970) (symbol 9956 . 9962) (bol 9956 . 9956) (symbol 8165 . 8179) (symbol 8163 . 8164) (symbol 8157 . 8162) (symbol 8150 . 8156) (bol 8150 . 8150) (symbol 8135 . 8142) (punctuation 8134 . 8135) (symbol 8129 . 8134) (bol 8127 . 8127) (punctuation 8000 . 8001) (punctuation 7998 . 7999) (symbol 7996 . 7997) (bol 7994 . 7994) (symbol 7987 . 7993) (punctuation 7986 . 7987) (symbol 7981 . 7986) (bol 7979 . 7979) (punctuation 7972 . 7973) (symbol 7970 . 7971) (bol 7968 . 7968) (punctuation 7966 . 7967) (symbol 7960 . 7965) (bol 7958 . 7958) (symbol 6987 . 7000) (symbol 6976 . 6986) (symbol 6960 . 6975) (symbol 6953 . 6959) (bol 6953 . 6953) (symbol 6938 . 6952) (symbol 6923 . 6937) (symbol 6916 . 6922) (bol 6916 . 6916) (symbol 6907 . 6908) (punctuation 6905 . 6906) (punctuation 6904 . 6905) (symbol 6889 . 6903) (bol 6887 . 6887) (symbol 6854 . 6855) (punctuation 6852 . 6853) (punctuation 6851 . 6852) (symbol 6836 . 6850) (bol 6834 . 6834) (semantic-list 6593 . 6621) (punctuation 6592 . 6593) (punctuation 6590 . 6591) (punctuation 6589 . 6590) (symbol 6574 . 6588) (bol 6572 . 6572) (symbol 5805 . 5811) (punctuation 5803 . 5804) (punctuation 5802 . 5803) (symbol 5794 . 5801) (bol 5786 . 5786) (punctuation 5645 . 5646) (punctuation 5644 . 5645) (symbol 5630 . 5643) (bol 5630 . 5630) (semantic-list 5620 . 5629) (punctuation 5619 . 5620) (punctuation 5617 . 5618) (punctuation 5616 . 5617) (symbol 5610 . 5614) (bol 5610 . 5610) (symbol 4153 . 4159) (symbol 4147 . 4152) (symbol 4139 . 4146) (symbol 4131 . 4138) (symbol 4124 . 4130) (bol 4124 . 4124) (ENDIF 3559 . 3564) (bol 3559 . 3559) (ENDIF 3525 . 3530) (bol 3525 . 3525) (semantic-list 3158 . 3247) (punctuation 3157 . 3158) (bol 3157 . 3157) (ENDIF 2814 . 2819) (bol 2812 . 2812) (semantic-list 2808 . 2811) (punctuation 2807 . 2808) (punctuation 2805 . 2806) (punctuation 2804 . 2805) (symbol 2790 . 2803) (bol 2786 . 2786) (semantic-list 2754 . 2785) (IFEQ 2749 . 2753) (bol 2747 . 2747) (ENDIF 1908 . 1913) (bol 1906 . 1906) (semantic-list 1902 . 1905) (punctuation 1901 . 1902) (punctuation 1899 . 1900) (punctuation 1898 . 1899) (symbol 1884 . 1897) (bol 1880 . 1880) (semantic-list 1848 . 1879) (IFEQ 1843 . 1847) (bol 1841 . 1841) (semantic-list 1817 . 1826) (punctuation 1816 . 1817) (punctuation 1814 . 1815) (punctuation 1813 . 1814) (symbol 1799 . 1812) (bol 1797 . 1797) (symbol 1589 . 1590) (punctuation 1587 . 1588) (symbol 1571 . 1586) (bol 1569 . 1569) (ENDIF 1534 . 1539) (bol 1532 . 1532) (semantic-list 1528 . 1531) (punctuation 1527 . 1528) (punctuation 1525 . 1526) (symbol 1509 . 1524) (bol 1505 . 1505) (semantic-list 1473 . 1504) (IFEQ 1468 . 1472) (bol 1466 . 1466) (symbol 1357 . 1358) (punctuation 1355 . 1356) (symbol 1340 . 1354) (bol 1338 . 1338) (ENDIF 1304 . 1309) (bol 1302 . 1302) (semantic-list 1298 . 1301) (punctuation 1297 . 1298) (punctuation 1295 . 1296) (symbol 1280 . 1294) (bol 1276 . 1276) (semantic-list 1244 . 1275) (IFEQ 1239 . 1243) (bol 1237 . 1237))))
  :file "!ssh:nmg@192.168.0.105:!home!nmg!lev-native!kitten!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
